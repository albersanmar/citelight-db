-- =====================================================
-- CAT_ESTATUS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_ESTATUS;

CREATE TABLE CAT_ESTATUS (
    ESTATUS_KEY INTEGER NOT NULL PRIMARY KEY,
    DESCRIPCION VARCHAR(100) NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IDX_CAT_ESTATUS_ESTATUS_KEY ON CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_ESTATUS_BI FOR CAT_ESTATUS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ESTATUS_KEY IS NULL OR NEW.ESTATUS_KEY <= 0) THEN
        NEW.ESTATUS_KEY = GEN_ID(GEN_CAT_ESTATUS, 1);
END;

INSERT INTO CAT_ESTATUS (ESTATUS_KEY, DESCRIPCION) VALUES (1, 'ACTIVO');
INSERT INTO CAT_ESTATUS (ESTATUS_KEY, DESCRIPCION) VALUES (2, 'INACTIVO');

-- =====================================================
-- CAT_USUARIOS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_USUARIOS;

CREATE TABLE CAT_USUARIOS (
    USUARIOS_KEY INTEGER NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO_PATERNO VARCHAR(100) NOT NULL,
    APELLIDO_MATERNO VARCHAR(100),
    LOGIN VARCHAR(150) NOT NULL,
    EMAIL VARCHAR(150) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    TOKEN_PASSWORD VARCHAR(500),
    CLAVE_USUARIO VARCHAR(20),
    PERFIL_LINK INTEGER,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_USUARIOS_USUARIOS_KEY ON CAT_USUARIOS (USUARIOS_KEY);
CREATE UNIQUE INDEX IDX_CAT_USUARIOS_LOGIN ON CAT_USUARIOS (LOGIN);
CREATE UNIQUE INDEX IDX_CAT_USUARIOS_EMAIL ON CAT_USUARIOS (EMAIL);
CREATE UNIQUE INDEX IDX_CAT_USUARIOS_CLAVE_USUARIO ON CAT_USUARIOS (CLAVE_USUARIO);

ALTER TABLE CAT_USUARIOS ADD CONSTRAINT FK_CAT_USUARIOS_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

ALTER TABLE CAT_USUARIOS ADD CONSTRAINT FK_CAT_USUARIOS_PERFIL 
    FOREIGN KEY (PERFIL_LINK) REFERENCES CAT_PERFILES (PERFIL_KEY);

CREATE TRIGGER TR_CAT_USUARIOS_BI FOR CAT_USUARIOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.USUARIOS_KEY IS NULL OR NEW.USUARIOS_KEY <= 0) THEN
        NEW.USUARIOS_KEY = GEN_ID(GEN_CAT_USUARIOS, 1);
END;

-- =====================================================
-- CAT_PROYECTOS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_PROYECTOS;

CREATE TABLE CAT_PROYECTOS (
    PROYECTO_KEY INTEGER NOT NULL PRIMARY KEY,
    CLAVE_PROYECTO VARCHAR(20),
    NOMBRE VARCHAR(200) NOT NULL,
    DESCRIPCION BLOB SUB_TYPE TEXT,
    FECHA_INICIO DATE NOT NULL,
    FECHA_FIN DATE,
    LATITUD DOUBLE PRECISION,
    LONGITUD DOUBLE PRECISION,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_PROYECTOS_PROYECTO_KEY ON CAT_PROYECTOS (PROYECTO_KEY);
CREATE UNIQUE INDEX IDX_CAT_PROYECTOS_CLAVE_PROYECTO ON CAT_PROYECTOS (CLAVE_PROYECTO);

ALTER TABLE CAT_PROYECTOS ADD CONSTRAINT FK_CAT_PROYECTOS_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_PROYECTOS_BI FOR CAT_PROYECTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.PROYECTO_KEY IS NULL OR NEW.PROYECTO_KEY <= 0) THEN
        NEW.PROYECTO_KEY = GEN_ID(GEN_CAT_PROYECTOS, 1);
END;

-- =====================================================
-- CAT_PERMISOS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_PERMISOS;

CREATE TABLE CAT_PERMISOS (
    PERMISO_KEY INTEGER NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(100),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_PERMISOS_PERMISO_KEY ON CAT_PERMISOS (PERMISO_KEY);

ALTER TABLE CAT_PERMISOS ADD CONSTRAINT FK_CAT_PERMISOS_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_PERMISOS_BI FOR CAT_PERMISOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.PERMISO_KEY IS NULL OR NEW.PERMISO_KEY <= 0) THEN
        NEW.PERMISO_KEY = GEN_ID(GEN_CAT_PERMISOS, 1);
END;

-- =====================================================
-- CAT_PERFILES.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_PERFILES;

CREATE TABLE CAT_PERFILES (
    PERFIL_KEY INTEGER NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    CLAVE_PERFIL VARCHAR(100),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_PERFILES_PERFIL_KEY ON CAT_PERFILES (PERFIL_KEY);
CREATE UNIQUE INDEX IDX_CAT_PERFILES_CLAVE_PERFIL ON CAT_PERFILES (CLAVE_PERFIL);

ALTER TABLE CAT_PERFILES ADD CONSTRAINT FK_CAT_PERFILES_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_PERFILES_BI FOR CAT_PERFILES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.PERFIL_KEY IS NULL OR NEW.PERFIL_KEY <= 0) THEN
        NEW.PERFIL_KEY = GEN_ID(GEN_CAT_PERFILES, 1);
END;

-- =====================================================
-- CAT_BASES.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_BASES;

CREATE TABLE CAT_BASES (
    BASE_KEY INTEGER NOT NULL PRIMARY KEY,
    CODIGO_BASE VARCHAR(50) NOT NULL,
    DESCRIPCION_BASE VARCHAR(100) NOT NULL,
    MATERIAL VARCHAR(50),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_BASES_BASE_KEY ON CAT_BASES (BASE_KEY);
CREATE UNIQUE INDEX IDX_CAT_BASES_CODIGO_BASE ON CAT_BASES (CODIGO_BASE);

ALTER TABLE CAT_BASES ADD CONSTRAINT FK_CAT_BASES_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_BASES_BI FOR CAT_BASES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.BASE_KEY IS NULL OR NEW.BASE_KEY <= 0) THEN
        NEW.BASE_KEY = GEN_ID(GEN_CAT_BASES, 1);
END;

-- =====================================================
-- CAT_POSTES.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_POSTES;

CREATE TABLE CAT_POSTES (
    POSTE_KEY INTEGER NOT NULL PRIMARY KEY,
    DESCRIPCION_POSTE VARCHAR(100) NOT NULL,
    CODIGO_POSTE VARCHAR(50) NOT NULL,
    MATERIAL VARCHAR(50),
    ALTURA DECIMAL(5,2),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_POSTES_POSTE_KEY ON CAT_POSTES (POSTE_KEY);
CREATE UNIQUE INDEX IDX_CAT_POSTES_CODIGO_POSTE ON CAT_POSTES (CODIGO_POSTE);

ALTER TABLE CAT_POSTES ADD CONSTRAINT FK_CAT_POSTES_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_POSTES_BI FOR CAT_POSTES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.POSTE_KEY IS NULL OR NEW.POSTE_KEY <= 0) THEN
        NEW.POSTE_KEY = GEN_ID(GEN_CAT_POSTES, 1);
END;

-- =====================================================
-- CAT_BRAZOS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_BRAZOS;

CREATE TABLE CAT_BRAZOS (
    BRAZO_KEY INTEGER NOT NULL PRIMARY KEY,
    CODIGO_BRAZO VARCHAR(50) NOT NULL,
    DESCRIPCION_BRAZO VARCHAR(100),
    MATERIAL VARCHAR(50),
    LONGITUD DECIMAL(5,2),
    ANGULO DECIMAL(5,2),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_BRAZOS_BRAZO_KEY ON CAT_BRAZOS (BRAZO_KEY);
CREATE UNIQUE INDEX IDX_CAT_BRAZOS_CODIGO_BRAZO ON CAT_BRAZOS (CODIGO_BRAZO);

ALTER TABLE CAT_BRAZOS ADD CONSTRAINT FK_CAT_BRAZOS_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_BRAZOS_BI FOR CAT_BRAZOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.BRAZO_KEY IS NULL OR NEW.BRAZO_KEY <= 0) THEN
        NEW.BRAZO_KEY = GEN_ID(GEN_CAT_BRAZOS, 1);
END;

-- =====================================================
-- CAT_LUMINARIAS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_LUMINARIAS;

CREATE TABLE CAT_LUMINARIAS (
    ILUMINARIAS_KEY INTEGER NOT NULL PRIMARY KEY,
    CODIGO_LUMINARIA VARCHAR(50) NOT NULL,
    DESCRIPCION_LUMINARIA VARCHAR(100),
    MODELO VARCHAR(100),
    POTENCIA DECIMAL(6,2),
    FLUJO_LUMINOSO DECIMAL(8,2),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_LUMINARIAS_ILUMINARIAS_KEY ON CAT_LUMINARIAS (ILUMINARIAS_KEY);
CREATE UNIQUE INDEX IDX_CAT_LUMINARIAS_CODIGO_LUMINARIA ON CAT_LUMINARIAS (CODIGO_LUMINARIA);

ALTER TABLE CAT_LUMINARIAS ADD CONSTRAINT FK_CAT_LUMINARIAS_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_LUMINARIAS_BI FOR CAT_LUMINARIAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ILUMINARIAS_KEY IS NULL OR NEW.ILUMINARIAS_KEY <= 0) THEN
        NEW.ILUMINARIAS_KEY = GEN_ID(GEN_CAT_LUMINARIAS, 1);
END;

-- =====================================================
-- CAT_LAMPARAS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_LAMPARAS;

CREATE TABLE CAT_LAMPARAS (
    LAMPARA_KEY INTEGER NOT NULL PRIMARY KEY,
    CODIGO_LAMPARA VARCHAR(50) NOT NULL,
    DESCRIPCION_LAMPARA VARCHAR(100),
    POTENCIA DECIMAL(6,2),
    VIDA_UTIL_HORAS INTEGER,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_LAMPARAS_LAMPARA_KEY ON CAT_LAMPARAS (LAMPARA_KEY);
CREATE UNIQUE INDEX IDX_CAT_LAMPARAS_CODIGO_LAMPARA ON CAT_LAMPARAS (CODIGO_LAMPARA);

ALTER TABLE CAT_LAMPARAS ADD CONSTRAINT FK_CAT_LAMPARAS_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_LAMPARAS_BI FOR CAT_LAMPARAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.LAMPARA_KEY IS NULL OR NEW.LAMPARA_KEY <= 0) THEN
        NEW.LAMPARA_KEY = GEN_ID(GEN_CAT_LAMPARAS, 1);
END;

-- =====================================================
-- CAT_ALMACENES.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_ALMACENES;

CREATE TABLE CAT_ALMACENES (
    ALMACEN_KEY INTEGER NOT NULL PRIMARY KEY,
    CLAVE_ALMACEN VARCHAR(20),
    NOMBRE VARCHAR(100) NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_ALMACENES_ALMACEN_KEY ON CAT_ALMACENES (ALMACEN_KEY);
CREATE UNIQUE INDEX IDX_CAT_ALMACENES_CLAVE_ALMACEN ON CAT_ALMACENES (CLAVE_ALMACEN);

ALTER TABLE CAT_ALMACENES ADD CONSTRAINT FK_CAT_ALMACENES_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_ALMACENES_BI FOR CAT_ALMACENES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ALMACEN_KEY IS NULL OR NEW.ALMACEN_KEY <= 0) THEN
        NEW.ALMACEN_KEY = GEN_ID(GEN_CAT_ALMACENES, 1);
END;

-- =====================================================
-- CAT_CUADILLAS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_CUADRILLAS;

CREATE TABLE CAT_CUADRILLAS (
    CUADRILLA_KEY INTEGER NOT NULL PRIMARY KEY,
    CLAVE_CUADRILLA VARCHAR(20),
    NOMBRE VARCHAR(100) NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CAT_CUADRILLAS_CUADRILLA_KEY ON CAT_CUADRILLAS (CUADRILLA_KEY);
CREATE UNIQUE INDEX IDX_CAT_CUADRILLAS_CLAVE_CUADRILLA ON CAT_CUADRILLAS (CLAVE_CUADRILLA);

ALTER TABLE CAT_CUADRILLAS ADD CONSTRAINT FK_CAT_CUADRILLAS_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CAT_CUADRILLAS_BI FOR CAT_CUADRILLAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.CUADRILLA_KEY IS NULL OR NEW.CUADRILLA_KEY <= 0) THEN
        NEW.CUADRILLA_KEY = GEN_ID(GEN_CAT_CUADRILLAS, 1);
END;

-- =====================================================
-- CAT_ESTADOS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_ESTADOS;

CREATE TABLE CAT_ESTADOS (
    ESTADO_KEY INTEGER NOT NULL PRIMARY KEY,
    CLAVE_ESTADO VARCHAR(20),
    NOMBRE VARCHAR(100) NOT NULL,
    NOMBRE_ABREVIADO VARCHAR(100) NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IDX_CAT_ESTADOS_ESTADO_KEY ON CAT_ESTADOS (ESTADO_KEY);
CREATE UNIQUE INDEX IDX_CAT_ESTADOS_CLAVE_ESTADO ON CAT_ESTADOS (CLAVE_ESTADO);

CREATE TRIGGER TR_CAT_ESTADOS_BI FOR CAT_ESTADOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ESTADO_KEY IS NULL OR NEW.ESTADO_KEY <= 0) THEN
        NEW.ESTADO_KEY = GEN_ID(GEN_CAT_ESTADOS, 1);
END;

-- =====================================================
-- CAT_MUNICIPIOS.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_MUNICIPIOS;

CREATE TABLE CAT_MUNICIPIOS (
    MUNICIPIO_KEY INTEGER NOT NULL PRIMARY KEY,
    ESTADO_LINK INTEGER NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL,
    CLAVE_MUNICIPIO VARCHAR(100),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IDX_CAT_MUNICIPIOS_MUNICIPIO_KEY ON CAT_MUNICIPIOS (MUNICIPIO_KEY);
CREATE UNIQUE INDEX IDX_CAT_MUNICIPIOS_CLAVE_MUNICIPIO ON CAT_MUNICIPIOS (CLAVE_MUNICIPIO);

ALTER TABLE CAT_MUNICIPIOS ADD CONSTRAINT FK_CAT_MUNICIPIOS_ESTATUS 
    FOREIGN KEY (ESTADO_LINK) REFERENCES CAT_ESTADOS (ESTADO_KEY);

CREATE TRIGGER TR_CAT_MUNICIPIOS_BI FOR CAT_MUNICIPIOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.MUNICIPIO_KEY IS NULL OR NEW.MUNICIPIO_KEY <= 0) THEN
        NEW.MUNICIPIO_KEY = GEN_ID(GEN_CAT_MUNICIPIOS, 1);
END;

-- =====================================================
-- CAT_LOCALIDADES.sql
-- =====================================================
CREATE GENERATOR GEN_CAT_LOCALIDADES;

CREATE TABLE CAT_LOCALIDADES (
    LOCALIDAD_KEY INTEGER NOT NULL PRIMARY KEY,
    MUNICIPIO_LINK INTEGER NOT NULL,
    CLAVE_LOCALIDAD VARCHAR(100),
    NOMBRE VARCHAR(100) NOT NULL,
    CP VARCHAR(6),
    LATITUD DOUBLE PRECISION,
    LONGITUD DOUBLE PRECISION,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IDX_CAT_LOCALIDADES_LOCALIDAD_KEY ON CAT_LOCALIDADES (LOCALIDAD_KEY);
CREATE UNIQUE INDEX IDX_CAT_LOCALIDADES_CLAVE_LOCALIDAD ON CAT_LOCALIDADES (CLAVE_LOCALIDAD);

ALTER TABLE CAT_LOCALIDADES ADD CONSTRAINT FK_CAT_LOCALIDADES_MUNICIPIO 
    FOREIGN KEY (MUNICIPIO_LINK) REFERENCES CAT_MUNICIPIOS (MUNICIPIO_KEY);

CREATE TRIGGER TR_CAT_LOCALIDADES_BI FOR CAT_LOCALIDADES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.LOCALIDAD_KEY IS NULL OR NEW.LOCALIDAD_KEY <= 0) THEN
        NEW.LOCALIDAD_KEY = GEN_ID(GEN_CAT_LOCALIDADES, 1);
END;

-- =====================================================
-- ALMACEN_PROYECTO.sql
-- =====================================================
CREATE GENERATOR GEN_ALMACEN_PROYECTO;

CREATE TABLE ALMACEN_PROYECTO (
    ALMACEN_PROYECTO_KEY INTEGER NOT NULL PRIMARY KEY,
    ALMACEN_LINK INTEGER NOT NULL,
    PROYECTO_LINK INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_ALMACEN_PROYECTO_ALMACEN_PROYECTO_KEY ON ALMACEN_PROYECTO (ALMACEN_PROYECTO_KEY);

ALTER TABLE ALMACEN_PROYECTO ADD CONSTRAINT FK_ALMACEN_PROYECTO_ALMACEN 
    FOREIGN KEY (ALMACEN_LINK) REFERENCES CAT_ALMACENES (ALMACEN_KEY);

ALTER TABLE ALMACEN_PROYECTO ADD CONSTRAINT FK_ALMACEN_PROYECTO_PROYECTO 
    FOREIGN KEY (PROYECTO_LINK) REFERENCES CAT_PROYECTOS (PROYECTO_KEY);

ALTER TABLE ALMACEN_PROYECTO ADD CONSTRAINT FK_ALMACEN_PROYECTO_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_ALMACEN_PROYECTO_BI FOR ALMACEN_PROYECTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ALMACEN_PROYECTO_KEY IS NULL OR NEW.ALMACEN_PROYECTO_KEY <= 0) THEN
        NEW.ALMACEN_PROYECTO_KEY = GEN_ID(GEN_ALMACEN_PROYECTO, 1);
END;

-- =====================================================
-- CUADRILLA_PROYECTO.sql
-- =====================================================
CREATE GENERATOR GEN_CUADRILLA_PROYECTO;

CREATE TABLE CUADRILLA_PROYECTO (
    CUADRILLA_PROYECTO_KEY INTEGER NOT NULL PRIMARY KEY,
    CUADRILLA_LINK INTEGER NOT NULL,
    PROYECTO_LINK INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_CUADRILLA_PROYECTO_CUADRILLA_PROYECTO_KEY ON CUADRILLA_PROYECTO (CUADRILLA_PROYECTO_KEY);

ALTER TABLE CUADRILLA_PROYECTO ADD CONSTRAINT FK_CUADRILLA_PROYECTO_CUADRILLA 
    FOREIGN KEY (CUADRILLA_LINK) REFERENCES CAT_CUADRILLAS (CUADRILLA_KEY);

ALTER TABLE CUADRILLA_PROYECTO ADD CONSTRAINT FK_CUADRILLA_PROYECTO_PROYECTO 
    FOREIGN KEY (PROYECTO_LINK) REFERENCES CAT_PROYECTOS (PROYECTO_KEY);

ALTER TABLE CUADRILLA_PROYECTO ADD CONSTRAINT FK_CUADRILLA_PROYECTO_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_CUADRILLA_PROYECTO_BI FOR CUADRILLA_PROYECTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.CUADRILLA_PROYECTO_KEY IS NULL OR NEW.CUADRILLA_PROYECTO_KEY <= 0) THEN
        NEW.CUADRILLA_PROYECTO_KEY = GEN_ID(GEN_CUADRILLA_PROYECTO, 1);
END;

-- =====================================================
-- USUARIO_PROYECTO.sql
-- =====================================================
CREATE GENERATOR GEN_USUARIO_PROYECTO;

CREATE TABLE USUARIO_PROYECTO (
    USUARIO_PROYECTO_KEY INTEGER NOT NULL PRIMARY KEY,
    USUARIO_LINK INTEGER NOT NULL,
    PROYECTO_LINK INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_USUARIO_PROYECTO_USUARIO_PROYECTO_KEY ON USUARIO_PROYECTO (USUARIO_PROYECTO_KEY);

ALTER TABLE USUARIO_PROYECTO ADD CONSTRAINT FK_USUARIO_PROYECTO_USUARIO 
    FOREIGN KEY (USUARIO_LINK) REFERENCES CAT_USUARIOS (USUARIOS_KEY);

ALTER TABLE USUARIO_PROYECTO ADD CONSTRAINT FK_USUARIO_PROYECTO_PROYECTO 
    FOREIGN KEY (PROYECTO_LINK) REFERENCES CAT_PROYECTOS (PROYECTO_KEY);

ALTER TABLE USUARIO_PROYECTO ADD CONSTRAINT FK_USUARIO_PROYECTO_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_USUARIO_PROYECTO_BI FOR USUARIO_PROYECTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.USUARIO_PROYECTO_KEY IS NULL OR NEW.USUARIO_PROYECTO_KEY <= 0) THEN
        NEW.USUARIO_PROYECTO_KEY = GEN_ID(GEN_USUARIO_PROYECTO, 1);
END;

-- =====================================================
-- USUARIO_PERFIL_PERMISO.sql
-- =====================================================
CREATE GENERATOR GEN_USUARIO_PERFIL;

CREATE TABLE USUARIO_PERFIL (
    USUARIO_PERFIL_KEY INTEGER NOT NULL PRIMARY KEY,
    USUARIO_LINK INTEGER NOT NULL,
    PERFIL_LINK INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_USUARIO_PERFIL_USUARIO_PERFIL_KEY ON USUARIO_PERFIL (USUARIO_PERFIL_KEY);

ALTER TABLE USUARIO_PERFIL ADD CONSTRAINT FK_USUARIO_PERFIL_USUARIO 
    FOREIGN KEY (USUARIO_LINK) REFERENCES CAT_USUARIOS (USUARIOS_KEY);

ALTER TABLE USUARIO_PERFIL ADD CONSTRAINT FK_USUARIO_PERFIL_PERFIL 
    FOREIGN KEY (PERFIL_LINK) REFERENCES CAT_PERFILES (PERFIL_KEY);

ALTER TABLE USUARIO_PERFIL ADD CONSTRAINT FK_USUARIO_PERFIL_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_USUARIO_PERFIL_BI FOR USUARIO_PERFIL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.USUARIO_PERFIL_KEY IS NULL OR NEW.USUARIO_PERFIL_KEY <= 0) THEN
        NEW.USUARIO_PERFIL_KEY = GEN_ID(GEN_USUARIO_PERFIL, 1);
END;

-- =====================================================
-- PERFIL_PERMISO.sql
-- =====================================================
CREATE GENERATOR GEN_PERFIL_PERMISO;

CREATE TABLE PERFIL_PERMISO (
    PERFIL_PERMISO_KEY INTEGER NOT NULL PRIMARY KEY,
    PERFIL_LINK INTEGER NOT NULL,
    PERMISO_LINK INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTATUS_LINK INTEGER NOT NULL
);

CREATE UNIQUE INDEX IDX_PERFIL_PERMISO_PERFIL_PERMISO_KEY ON PERFIL_PERMISO (PERFIL_PERMISO_KEY);

ALTER TABLE PERFIL_PERMISO ADD CONSTRAINT FK_PERFIL_PERMISO_PERFIL 
    FOREIGN KEY (PERFIL_LINK) REFERENCES CAT_PERFILES (PERFIL_KEY);

ALTER TABLE PERFIL_PERMISO ADD CONSTRAINT FK_PERFIL_PERMISO_PERMISO 
    FOREIGN KEY (PERMISO_LINK) REFERENCES CAT_PERMISOS (PERMISO_KEY);

ALTER TABLE PERFIL_PERMISO ADD CONSTRAINT FK_PERFIL_PERMISO_ESTATUS 
    FOREIGN KEY (ESTATUS_LINK) REFERENCES CAT_ESTATUS (ESTATUS_KEY);

CREATE TRIGGER TR_PERFIL_PERMISO_BI FOR PERFIL_PERMISO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.PERFIL_PERMISO_KEY IS NULL OR NEW.PERFIL_PERMISO_KEY <= 0) THEN
        NEW.PERFIL_PERMISO_KEY = GEN_ID(GEN_PERFIL_PERMISO, 1);
END;

SET TERM ^ ;

-- =====================================================
-- CAT_ESTATUS_PROCS.sql
-- =====================================================
CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_INSERT_CAT_ESTATUS (
	P_DESCRIPCION VARCHAR(100)
)
RETURNS (
	ESTATUS_KEY INTEGER
)
AS
BEGIN
	INSERT INTO CAT_ESTATUS (DESCRIPCION)
	VALUES (:P_DESCRIPCION)
	RETURNING ESTATUS_KEY INTO :ESTATUS_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_UPDATE_CAT_ESTATUS (
	P_ESTATUS_KEY INTEGER,
	P_DESCRIPCION VARCHAR(100)
)
AS
BEGIN
	UPDATE CAT_ESTATUS
	SET DESCRIPCION = :P_DESCRIPCION,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE ESTATUS_KEY = :P_ESTATUS_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_SELECT_CAT_ESTATUS (
	P_ESTATUS_KEY INTEGER = 0
)
RETURNS (
	ESTATUS_KEY INTEGER,
	DESCRIPCION VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP
)
AS
BEGIN
	IF (:P_ESTATUS_KEY = 0) THEN
	BEGIN
		-- Retornar listado completo
		FOR
			SELECT ESTATUS_KEY, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION
			FROM CAT_ESTATUS
			INTO :ESTATUS_KEY, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION
		DO
			SUSPEND;
	END
	ELSE IF (:P_ESTATUS_KEY > 0) THEN
	BEGIN
		-- Retornar solo un registro específico
		FOR
			SELECT ESTATUS_KEY, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION
			FROM CAT_ESTATUS
			WHERE ESTATUS_KEY = :P_ESTATUS_KEY
			INTO :ESTATUS_KEY, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION
		DO
			SUSPEND;
	END
END

SET TERM ; ^

-- =====================================================
-- CAT_USUARIOS_PROCS.sql
-- =====================================================
CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_INSERT_CAT_USUARIOS (
	P_NOMBRE VARCHAR(100),
	P_APELLIDO_PATERNO VARCHAR(100),
	P_APELLIDO_MATERNO VARCHAR(100),
	P_LOGIN VARCHAR(150),
	P_EMAIL VARCHAR(150),
	P_PASSWORD VARCHAR(255),
	P_TOKEN_PASSWORD VARCHAR(500),
	P_CLAVE_USUARIO VARCHAR(20),
	P_ESTATUS_LINK INTEGER
)
RETURNS (
	USUARIOS_KEY INTEGER
)
AS
BEGIN
	INSERT INTO CAT_USUARIOS (
		NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, LOGIN, EMAIL, PASSWORD,
		TOKEN_PASSWORD, CLAVE_USUARIO, ESTATUS_LINK
	)
	VALUES (
		:P_NOMBRE, :P_APELLIDO_PATERNO, :P_APELLIDO_MATERNO, :P_LOGIN, :P_EMAIL, :P_PASSWORD,
		:P_TOKEN_PASSWORD, :P_CLAVE_USUARIO, :P_ESTATUS_LINK
	)
	RETURNING USUARIOS_KEY INTO :USUARIOS_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_UPDATE_CAT_USUARIOS (
	P_USUARIOS_KEY INTEGER,
	P_NOMBRE VARCHAR(100),
	P_APELLIDO_PATERNO VARCHAR(100),
	P_APELLIDO_MATERNO VARCHAR(100),
	P_LOGIN VARCHAR(150),
	P_EMAIL VARCHAR(150),
	P_PASSWORD VARCHAR(255),
	P_TOKEN_PASSWORD VARCHAR(500),
	P_CLAVE_USUARIO VARCHAR(20),
	P_ESTATUS_LINK INTEGER
)
AS
BEGIN
	UPDATE CAT_USUARIOS
	SET NOMBRE = :P_NOMBRE,
		APELLIDO_PATERNO = :P_APELLIDO_PATERNO,
		APELLIDO_MATERNO = :P_APELLIDO_MATERNO,
		LOGIN = :P_LOGIN,
		EMAIL = :P_EMAIL,
		PASSWORD = :P_PASSWORD,
		TOKEN_PASSWORD = :P_TOKEN_PASSWORD,
		CLAVE_USUARIO = :P_CLAVE_USUARIO,
		ESTATUS_LINK = :P_ESTATUS_LINK,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE USUARIOS_KEY = :P_USUARIOS_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_DELETE_CAT_USUARIOS (
	P_USUARIOS_KEY INTEGER
)
AS
BEGIN
	UPDATE CAT_USUARIOS
	SET ESTATUS_LINK = 2,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE USUARIOS_KEY = :P_USUARIOS_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_SELECT_CAT_USUARIOS (
	P_USUARIOS_KEY INTEGER,
	P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
	USUARIOS_KEY INTEGER,
	NOMBRE VARCHAR(100),
	APELLIDO_PATERNO VARCHAR(100),
	APELLIDO_MATERNO VARCHAR(100),
	LOGIN VARCHAR(150),
	EMAIL VARCHAR(150),
	PASSWORD VARCHAR(255),
	TOKEN_PASSWORD VARCHAR(500),
	CLAVE_USUARIO VARCHAR(20),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
	IF (:P_USUARIOS_KEY = 0) THEN
	BEGIN
		-- Retornar listado completo
		FOR
			SELECT USUARIOS_KEY, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO,
				   LOGIN, EMAIL, PASSWORD, TOKEN_PASSWORD, CLAVE_USUARIO,
				   FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
			FROM CAT_USUARIOS
			WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
			INTO :USUARIOS_KEY, :NOMBRE, :APELLIDO_PATERNO, :APELLIDO_MATERNO,
				 :LOGIN, :EMAIL, :PASSWORD, :TOKEN_PASSWORD, :CLAVE_USUARIO,
				 :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
	ELSE IF (:P_USUARIOS_KEY > 0) THEN
	BEGIN
		-- Retornar solo un registro específico
		FOR
			SELECT USUARIOS_KEY, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO,
				   LOGIN, EMAIL, PASSWORD, TOKEN_PASSWORD, CLAVE_USUARIO,
				   FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
			FROM CAT_USUARIOS
			WHERE USUARIOS_KEY = :P_USUARIOS_KEY
			INTO :USUARIOS_KEY, :NOMBRE, :APELLIDO_PATERNO, :APELLIDO_MATERNO,
				 :LOGIN, :EMAIL, :PASSWORD, :TOKEN_PASSWORD, :CLAVE_USUARIO,
				 :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
END

SET TERM ; ^

-- =====================================================
-- CAT_PROYECTOS_PROCS.sql
-- =====================================================
CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_INSERT_CAT_PROYECTOS (
	P_CLAVE_PROYECTO VARCHAR(20),
	P_NOMBRE VARCHAR(200),
	P_DESCRIPCION BLOB SUB_TYPE TEXT,
	P_FECHA_INICIO DATE,
	P_FECHA_FIN DATE,
	P_LATITUD DOUBLE PRECISION,
	P_LONGITUD DOUBLE PRECISION,
	P_ESTATUS_LINK INTEGER
)
RETURNS (
	PROYECTO_KEY INTEGER
)
AS
BEGIN
	INSERT INTO CAT_PROYECTOS (
		CLAVE_PROYECTO, NOMBRE, DESCRIPCION, FECHA_INICIO, FECHA_FIN,
		LATITUD, LONGITUD, ESTATUS_LINK
	)
	VALUES (
		:P_CLAVE_PROYECTO, :P_NOMBRE, :P_DESCRIPCION, :P_FECHA_INICIO, :P_FECHA_FIN,
		:P_LATITUD, :P_LONGITUD, :P_ESTATUS_LINK
	)
	RETURNING PROYECTO_KEY INTO :PROYECTO_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_UPDATE_CAT_PROYECTOS (
	P_PROYECTO_KEY INTEGER,
	P_CLAVE_PROYECTO VARCHAR(20),
	P_NOMBRE VARCHAR(200),
	P_DESCRIPCION BLOB SUB_TYPE TEXT,
	P_FECHA_INICIO DATE,
	P_FECHA_FIN DATE,
	P_LATITUD DOUBLE PRECISION,
	P_LONGITUD DOUBLE PRECISION,
	P_ESTATUS_LINK INTEGER
)
AS
BEGIN
	UPDATE CAT_PROYECTOS
	SET CLAVE_PROYECTO = :P_CLAVE_PROYECTO,
		NOMBRE = :P_NOMBRE,
		DESCRIPCION = :P_DESCRIPCION,
		FECHA_INICIO = :P_FECHA_INICIO,
		FECHA_FIN = :P_FECHA_FIN,
		LATITUD = :P_LATITUD,
		LONGITUD = :P_LONGITUD,
		ESTATUS_LINK = :P_ESTATUS_LINK,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE PROYECTO_KEY = :P_PROYECTO_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_DELETE_CAT_PROYECTOS (
	P_PROYECTO_KEY INTEGER
)
AS
BEGIN
	UPDATE CAT_PROYECTOS
	SET ESTATUS_LINK = 2,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE PROYECTO_KEY = :P_PROYECTO_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_SELECT_CAT_PROYECTOS (
	P_PROYECTO_KEY INTEGER,
	P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
	PROYECTO_KEY INTEGER,
	CLAVE_PROYECTO VARCHAR(20),
	NOMBRE VARCHAR(200),
	DESCRIPCION BLOB SUB_TYPE TEXT,
	FECHA_INICIO DATE,
	FECHA_FIN DATE,
	LATITUD DOUBLE PRECISION,
	LONGITUD DOUBLE PRECISION,
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
	IF (:P_PROYECTO_KEY = 0) THEN
	BEGIN
		-- Retornar listado completo
		FOR
			SELECT PROYECTO_KEY, CLAVE_PROYECTO, NOMBRE, DESCRIPCION, FECHA_INICIO, FECHA_FIN,
				   LATITUD, LONGITUD, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
			FROM CAT_PROYECTOS
			WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
			INTO :PROYECTO_KEY, :CLAVE_PROYECTO, :NOMBRE, :DESCRIPCION, :FECHA_INICIO, :FECHA_FIN,
				 :LATITUD, :LONGITUD, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
	ELSE IF (:P_PROYECTO_KEY > 0) THEN
	BEGIN
		-- Retornar solo un registro específico
		FOR
			SELECT PROYECTO_KEY, CLAVE_PROYECTO, NOMBRE, DESCRIPCION, FECHA_INICIO, FECHA_FIN,
				   LATITUD, LONGITUD, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
			FROM CAT_PROYECTOS
			WHERE PROYECTO_KEY = :P_PROYECTO_KEY
			INTO :PROYECTO_KEY, :CLAVE_PROYECTO, :NOMBRE, :DESCRIPCION, :FECHA_INICIO, :FECHA_FIN,
				 :LATITUD, :LONGITUD, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
END

SET TERM ; ^

-- =====================================================
-- CAT_PERMISOS_PROCS.sql
-- =====================================================
CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_INSERT_CAT_PERMISOS (
	P_NOMBRE VARCHAR(100),
	P_DESCRIPCION VARCHAR(100),
	P_ESTATUS_LINK INTEGER
)
RETURNS (
	PERMISO_KEY INTEGER
)
AS
BEGIN
	INSERT INTO CAT_PERMISOS (NOMBRE, DESCRIPCION, ESTATUS_LINK)
	VALUES (:P_NOMBRE, :P_DESCRIPCION, :P_ESTATUS_LINK)
	RETURNING PERMISO_KEY INTO :PERMISO_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_UPDATE_CAT_PERMISOS (
	P_PERMISO_KEY INTEGER,
	P_NOMBRE VARCHAR(100),
	P_DESCRIPCION VARCHAR(100),
	P_ESTATUS_LINK INTEGER
)
AS
BEGIN
	UPDATE CAT_PERMISOS
	SET NOMBRE = :P_NOMBRE,
		DESCRIPCION = :P_DESCRIPCION,
		ESTATUS_LINK = :P_ESTATUS_LINK,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE PERMISO_KEY = :P_PERMISO_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_DELETE_CAT_PERMISOS (
	P_PERMISO_KEY INTEGER
)
AS
BEGIN
	UPDATE CAT_PERMISOS
	SET ESTATUS_LINK = 2,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE PERMISO_KEY = :P_PERMISO_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_SELECT_CAT_PERMISOS (
	P_PERMISO_KEY INTEGER = 0,
	P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
	PERMISO_KEY INTEGER,
	NOMBRE VARCHAR(100),
	DESCRIPCION VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
	IF (:P_PERMISO_KEY = 0) THEN
	BEGIN
		-- Retornar listado completo
		FOR
			SELECT PERMISO_KEY, NOMBRE, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
			FROM CAT_PERMISOS
			WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
			INTO :PERMISO_KEY, :NOMBRE, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END     
	ELSE IF (:P_PERMISO_KEY > 0) THEN
	BEGIN
		-- Retornar solo un registro específico
		FOR
			SELECT PERMISO_KEY, NOMBRE, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
			FROM CAT_PERMISOS
			WHERE PERMISO_KEY = :P_PERMISO_KEY
			INTO :PERMISO_KEY, :NOMBRE, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
END

SET TERM ; ^

-- =====================================================
-- CAT_PERFILES_PROCS.sql
-- =====================================================
CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_INSERT_CAT_PERFILES (
    P_NOMBRE VARCHAR(100),
    P_CLAVE_PERFIL VARCHAR(100),
    P_ESTATUS_LINK INTEGER
)
RETURNS (
    PERFIL_KEY INTEGER
)
AS
BEGIN
    INSERT INTO CAT_PERFILES (NOMBRE, CLAVE_PERFIL, ESTATUS_LINK)
    VALUES (:P_NOMBRE, :P_CLAVE_PERFIL, :P_ESTATUS_LINK)
    RETURNING PERFIL_KEY INTO :PERFIL_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_UPDATE_CAT_PERFILES (
    P_PERFIL_KEY INTEGER,
    P_NOMBRE VARCHAR(100),
    P_CLAVE_PERFIL VARCHAR(100),
    P_ESTATUS_LINK INTEGER
)
AS
BEGIN
    UPDATE CAT_PERFILES
    SET NOMBRE = :P_NOMBRE,
        CLAVE_PERFIL = :P_CLAVE_PERFIL,
        ESTATUS_LINK = :P_ESTATUS_LINK,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE PERFIL_KEY = :P_PERFIL_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_DELETE_CAT_PERFILES (
    P_PERFIL_KEY INTEGER
)
AS
BEGIN
    UPDATE CAT_PERFILES
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE PERFIL_KEY = :P_PERFIL_KEY;
END

CREATE OR ALTER PROCEDURE CITELIGHT_ADMIN_SELECT_CAT_PERFILES (
    P_PERFIL_KEY INTEGER = 0,
    P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
    PERFIL_KEY INTEGER,
    NOMBRE VARCHAR(100),
    CLAVE_PERFIL VARCHAR(100),
    FECHA_CREACION TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP,
    ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_PERFIL_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT PERFIL_KEY, NOMBRE, CLAVE_PERFIL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERFILES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :PERFIL_KEY, :NOMBRE, :CLAVE_PERFIL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_PERFIL_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT PERFIL_KEY, NOMBRE, CLAVE_PERFIL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERFILES
            WHERE PERFIL_KEY = :P_PERFIL_KEY
            INTO :PERFIL_KEY, :NOMBRE, :CLAVE_PERFIL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END

SET TERM ; ^