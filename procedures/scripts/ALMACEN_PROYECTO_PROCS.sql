SET TERM ^ ;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_ALMACEN_PROYECTO (
	P_ALMACEN_PROYECTO_KEY INTEGER,
	P_PROYECTO_KEY INTEGER,
	P_ALMACEN_KEY INTEGER,
	P_ESTATUS_LINK INTEGER
)
RETURNS (
	ALMACEN_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_ALMACEN_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
	V_CODE = 0;
	V_MSG = '';
	V_ALMACEN_PROYECTO_KEY = 0;

	IF (:P_ALMACEN_PROYECTO_KEY = 0) THEN
	BEGIN
		INSERT INTO ALMACEN_PROYECTO (ALMACEN_LINK, PROYECTO_LINK, ESTATUS_LINK)
		VALUES (:P_ALMACEN_KEY, :P_PROYECTO_KEY, :P_ESTATUS_LINK)
		RETURNING ALMACEN_PROYECTO_KEY INTO :V_ALMACEN_PROYECTO_KEY;
	END
	ELSE IF (:P_ALMACEN_PROYECTO_KEY > 0) THEN
	BEGIN
		IF (NOT EXISTS(SELECT ALMACEN_PROYECTO_KEY
				FROM ALMACEN_PROYECTO
				WHERE (ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY))) THEN
		BEGIN
			V_MSG = 'No existe un registro con este key';
		END
		UPDATE ALMACEN_PROYECTO
		SET ALMACEN_LINK = :P_ALMACEN_KEY,
			PROYECTO_LINK = :P_PROYECTO_KEY,
			ESTATUS_LINK = :P_ESTATUS_LINK
		WHERE ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY;
	END
	IF (ROW_COUNT > 0) THEN
	BEGIN
		V_CODE = 1;
		V_MSG = 'Información guardada correctamente';
	END
	ELSE
	BEGIN
		V_CODE = 0;
		V_MSG = 'No se pudo guardar la información';
	END

	RESULTADO = V_CODE;
	ALMACEN_PROYECTO_KEY = V_ALMACEN_PROYECTO_KEY;
	MSG = V_MSG;
	SUSPEND;
END^

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_ALMACEN_PROYECTO (
	P_ALMACEN_PROYECTO_KEY INTEGER
)
RETURNS (
	ALMACEN_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_ALMACEN_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
	V_CODE = 0;
	V_MSG = '';
	V_ALMACEN_PROYECTO_KEY = 0;

	IF (NOT EXISTS(SELECT ALMACEN_PROYECTO_KEY
			FROM ALMACEN_PROYECTO
			WHERE (ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY))) THEN
	BEGIN
		V_MSG = 'No existe un registro con este key';
	END

	UPDATE ALMACEN_PROYECTO
	SET ESTATUS_LINK = 2
	WHERE ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY;
	IF (ROW_COUNT > 0) THEN
	BEGIN
		V_CODE = 1;
		V_MSG = 'Registro eliminado correctamente';
	END
	ELSE
	BEGIN
		V_CODE = 0;
		V_MSG = 'No se pudo eliminar el registro';
	END
	RESULTADO = V_CODE;
	ALMACEN_PROYECTO_KEY = V_ALMACEN_PROYECTO_KEY;
	MSG = V_MSG;
	SUSPEND;
END^    

CREATE OR ALTER PROCEDURE CTLIGHT_GET_ALMACEN_PROYECTO (
	P_ALMACEN_PROYECTO_KEY INTEGER = 0,
	P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
	ALMACEN_PROYECTO_KEY INTEGER,
	ALMACEN_LINK INTEGER,
	PROYECTO_LINK INTEGER,
	FECHA_CREACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
	IF (:P_ALMACEN_PROYECTO_KEY = 0) THEN
	BEGIN
		-- Retornar listado completo
		FOR
			SELECT ALMACEN_PROYECTO_KEY, ALMACEN_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
			FROM ALMACEN_PROYECTO
			WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
			INTO :ALMACEN_PROYECTO_KEY, :ALMACEN_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
	ELSE IF (:P_ALMACEN_PROYECTO_KEY > 0) THEN
	BEGIN
		-- Retornar solo un registro específico
		FOR
			SELECT ALMACEN_PROYECTO_KEY, ALMACEN_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
			FROM ALMACEN_PROYECTO
			WHERE ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY
			INTO :ALMACEN_PROYECTO_KEY, :ALMACEN_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
END^

SET TERM ; ^