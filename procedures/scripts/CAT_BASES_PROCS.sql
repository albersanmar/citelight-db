SET TERM ^ ;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_BASES (
	P_BASE_KEY INTEGER,
    P_CODIGO_BASE VARCHAR(50),
    P_DESCRIPCION_BASE VARCHAR(100),
    P_MATERIAL VARCHAR(50),
    P_ESTATUS_LINK INTEGER
)
RETURNS (
	BASE_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_BASE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
	V_CODE = 0;
	V_MSG = '';
	V_BASE_KEY = 0;

	IF (:P_BASE_KEY = 0) THEN
	BEGIN
		INSERT INTO CAT_BASES (CODIGO_BASE, DESCRIPCION_BASE, MATERIAL, ESTATUS_LINK)
		VALUES (:P_CODIGO_BASE, :P_DESCRIPCION_BASE, :P_MATERIAL, :P_ESTATUS_LINK)
		RETURNING BASE_KEY INTO :V_BASE_KEY;
	END
	ELSE IF (:P_BASE_KEY > 0) THEN
	BEGIN
		IF (NOT EXISTS(SELECT BASE_KEY
				FROM CAT_BASES
				WHERE (BASE_KEY = :P_BASE_KEY))) THEN
		BEGIN
			V_MSG = 'No existe un registro con este key';
		END
		UPDATE CAT_BASES
		SET DESCRIPCION_BASE = :P_DESCRIPCION_BASE,
            MATERIAL = :P_MATERIAL,
            CODIGO_BASE = :P_CODIGO_BASE,
			ESTATUS_LINK = :P_ESTATUS_LINK,
			FECHA_MODIFICACION = CURRENT_TIMESTAMP
		WHERE BASE_KEY = :P_BASE_KEY;
	END
	IF (ROW_COUNT > 0) THEN
	BEGIN
		V_CODE = 1;
		V_MSG = 'Información guardada correctamente';
	END
	ELSE
	BEGIN
		V_CODE = 0;
		V_MSG = 'No se pudo guardar la información';
	END

	RESULTADO = V_CODE;
	BASE_KEY = V_BASE_KEY;
	MSG = V_MSG;
	SUSPEND;
END^

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_BASES (
	P_BASE_KEY INTEGER
)
RETURNS (
	BASE_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_BASE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
	V_CODE = 0;
	V_MSG = '';
	V_BASE_KEY = 0;

	IF (NOT EXISTS(SELECT BASE_KEY
			FROM CAT_BASES
			WHERE (BASE_KEY = :P_BASE_KEY))) THEN
	BEGIN
		V_MSG = 'No existe un registro con este key';
	END

	UPDATE CAT_BASES
	SET ESTATUS_LINK = 2,
		FECHA_MODIFICACION = CURRENT_TIMESTAMP
	WHERE BASE_KEY = :P_BASE_KEY;
	IF (ROW_COUNT > 0) THEN
	BEGIN
		V_CODE = 1;
		V_MSG = 'Registro eliminado correctamente';
	END
	ELSE
	BEGIN
		V_CODE = 0;
		V_MSG = 'No se pudo eliminar el registro';
	END
	RESULTADO = V_CODE;
	BASE_KEY = V_BASE_KEY;
	MSG = V_MSG;
	SUSPEND;
END^

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_BASES (
	P_BASE_KEY INTEGER = 0,
	P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
	BASE_KEY INTEGER,
	CODIGO_BASE VARCHAR(50),
	DESCRIPCION_BASE VARCHAR(100),
    MATERIAL VARCHAR(50),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
	IF (:P_BASE_KEY = 0) THEN
	BEGIN
		-- Retornar listado completo
		FOR
			SELECT BASE_KEY, CODIGO_BASE, DESCRIPCION_BASE, MATERIAL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_BASES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :BASE_KEY, :CODIGO_BASE, :DESCRIPCION_BASE, :MATERIAL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
	ELSE IF (:P_BASE_KEY > 0) THEN
	BEGIN
		-- Retornar solo un registro específico
		FOR
			SELECT BASE_KEY, CODIGO_BASE, DESCRIPCION_BASE, MATERIAL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_BASES
            WHERE BASE_KEY = :P_BASE_KEY
            INTO :BASE_KEY, :CODIGO_BASE, :DESCRIPCION_BASE, :MATERIAL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
		DO
			SUSPEND;
	END
END^

SET TERM ; ^