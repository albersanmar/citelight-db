SET TERM ^ ;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_POSTES (
    P_POSTE_KEY INTEGER,
    P_DESCRIPCION_POSTE VARCHAR(100),
    P_CODIGO_POSTE VARCHAR(50),
    P_MATERIAL VARCHAR(50),
    P_ALTURA DECIMAL(5,2),
    P_ESTATUS_LINK INTEGER
)
RETURNS (
    POSTE_KEY INTEGER,
    RESULTADO INTEGER,
    MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_POSTE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_POSTE_KEY = 0;

    IF (:P_POSTE_KEY = 0) THEN
    BEGIN
		INSERT INTO CAT_POSTES (DESCRIPCION_POSTE, CODIGO_POSTE, MATERIAL, ALTURA, ESTATUS_LINK)
		VALUES (:P_DESCRIPCION_POSTE, :P_CODIGO_POSTE, :P_MATERIAL, :P_ALTURA, :P_ESTATUS_LINK)
		RETURNING POSTE_KEY INTO :V_POSTE_KEY;
    END
    ELSE IF (:P_POSTE_KEY > 0) THEN
    BEGIN
		IF (NOT EXISTS(SELECT POSTE_KEY
				FROM CAT_POSTES
				WHERE (POSTE_KEY = :P_POSTE_KEY))) THEN
		BEGIN
			V_MSG = 'No existe un registro con este key';
		END
        UPDATE CAT_POSTES
        SET DESCRIPCION_POSTE = :P_DESCRIPCION_POSTE,
            CODIGO_POSTE = :P_CODIGO_POSTE,
            MATERIAL = :P_MATERIAL,
            ALTURA = :P_ALTURA,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE POSTE_KEY = :P_POSTE_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    POSTE_KEY = V_POSTE_KEY;
    MSG = V_MSG;
    SUSPEND;
END^

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_POSTES (
    P_POSTE_KEY INTEGER
)
RETURNS (
    POSTE_KEY INTEGER,
    RESULTADO INTEGER,
    MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_POSTE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_POSTE_KEY = 0;

    IF (NOT EXISTS(SELECT POSTE_KEY
		FROM CAT_POSTES
		WHERE (POSTE_KEY = :P_POSTE_KEY))) THEN
	BEGIN
		V_MSG = 'No existe un registro con este key';
	END

    UPDATE CAT_POSTES
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE POSTE_KEY = :P_POSTE_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    POSTE_KEY = V_POSTE_KEY;
    MSG = V_MSG;
    SUSPEND;
END^

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_POSTES (
    P_POSTE_KEY INTEGER = 0,
    P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
    POSTE_KEY INTEGER,
    DESCRIPCION_POSTE VARCHAR(100),
    CODIGO_POSTE VARCHAR(50),
    MATERIAL VARCHAR(50),
    ALTURA DECIMAL(5,2),
    FECHA_CREACION TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP,
    ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_POSTE_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT POSTE_KEY, DESCRIPCION_POSTE, CODIGO_POSTE, MATERIAL, ALTURA, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_POSTES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :POSTE_KEY, :DESCRIPCION_POSTE, :CODIGO_POSTE, :MATERIAL, :ALTURA, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_POSTE_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT POSTE_KEY, DESCRIPCION_POSTE, CODIGO_POSTE, MATERIAL, ALTURA, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_POSTES
            WHERE POSTE_KEY = :P_POSTE_KEY
            INTO :POSTE_KEY, :DESCRIPCION_POSTE, :CODIGO_POSTE, :MATERIAL, :ALTURA, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END^

SET TERM ; ^