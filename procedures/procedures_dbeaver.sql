CREATE OR ALTER PROCEDURE CTLIGHT_DEL_ALMACEN_PROYECTO (P_ALMACEN_PROYECTO_KEY INTEGER)
RETURNS (
	ALMACEN_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_ALMACEN_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_ALMACEN_PROYECTO_KEY = 0;

    IF (NOT EXISTS(SELECT ALMACEN_PROYECTO_KEY
            FROM ALMACEN_PROYECTO
            WHERE (ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE ALMACEN_PROYECTO
    SET ESTATUS_LINK = 2
    WHERE ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    ALMACEN_PROYECTO_KEY = V_ALMACEN_PROYECTO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_ALMACENES (P_ALMACEN_KEY INTEGER)
RETURNS (
	ALMACEN_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_ALMACEN_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_ALMACEN_KEY = 0;

    IF (NOT EXISTS(SELECT ALMACEN_KEY
        FROM CAT_ALMACENES
        WHERE (ALMACEN_KEY = :P_ALMACEN_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_ALMACENES
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE ALMACEN_KEY = :P_ALMACEN_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    ALMACEN_KEY = V_ALMACEN_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_BASES (P_BASE_KEY INTEGER)
RETURNS (
	BASE_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_BASE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_BASE_KEY = 0;

    IF (NOT EXISTS(SELECT BASE_KEY
            FROM CAT_BASES
            WHERE (BASE_KEY = :P_BASE_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_BASES
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE BASE_KEY = :P_BASE_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    BASE_KEY = V_BASE_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_BRAZOS (P_BRAZO_KEY INTEGER)
RETURNS (
	BRAZO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_BRAZO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_BRAZO_KEY = 0;

    IF (NOT EXISTS(SELECT BRAZO_KEY
        FROM CAT_BRAZOS
        WHERE (BRAZO_KEY = :P_BRAZO_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_BRAZOS
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE BRAZO_KEY = :P_BRAZO_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    BRAZO_KEY = V_BRAZO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_CUADRILLAS (P_CUADRILLA_KEY INTEGER)
RETURNS (
	CUADRILLA_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_CUADRILLA_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_CUADRILLA_KEY = 0;

    IF (NOT EXISTS(SELECT CUADRILLA_KEY
        FROM CAT_CUADRILLAS
        WHERE (CUADRILLA_KEY = :P_CUADRILLA_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_CUADRILLAS
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE CUADRILLA_KEY = :P_CUADRILLA_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    CUADRILLA_KEY = V_CUADRILLA_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_LAMPARAS (P_LAMPARA_KEY INTEGER)
RETURNS (
	LAMPARA_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_LAMPARA_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_LAMPARA_KEY = 0;

    IF (NOT EXISTS(SELECT LAMPARA_KEY
        FROM CAT_LAMPARAS
        WHERE (LAMPARA_KEY = :P_LAMPARA_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_LAMPARAS
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE LAMPARA_KEY = :P_LAMPARA_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    LAMPARA_KEY = V_LAMPARA_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_PERFILES (P_PERFIL_KEY INTEGER)
RETURNS (
	PERFIL_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERFIL_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERFIL_KEY = 0;

    IF (NOT EXISTS(SELECT PERFIL_KEY
        FROM CAT_PERFILES
        WHERE (PERFIL_KEY = :P_PERFIL_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_PERFILES
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE PERFIL_KEY = :P_PERFIL_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    PERFIL_KEY = V_PERFIL_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_PERMISOS (P_PERMISO_KEY INTEGER)
RETURNS (
	PERMISO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERMISO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERMISO_KEY = 0;

    IF (NOT EXISTS(SELECT PERMISO_KEY
            FROM CAT_PERMISOS
            WHERE (PERMISO_KEY = :P_PERMISO_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_PERMISOS
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE PERMISO_KEY = :P_PERMISO_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    PERMISO_KEY = V_PERMISO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_POSTES (P_POSTE_KEY INTEGER)
RETURNS (
	POSTE_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_POSTE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_POSTE_KEY = 0;

    IF (NOT EXISTS(SELECT POSTE_KEY
        FROM CAT_POSTES
        WHERE (POSTE_KEY = :P_POSTE_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_POSTES
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE POSTE_KEY = :P_POSTE_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    POSTE_KEY = V_POSTE_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_PROYECTOS (P_PROYECTO_KEY INTEGER)
RETURNS (
	PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PROYECTO_KEY = 0;

    IF (NOT EXISTS(SELECT PROYECTO_KEY
            FROM CAT_PROYECTOS
            WHERE (PROYECTO_KEY = :P_PROYECTO_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_PROYECTOS
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE PROYECTO_KEY = :P_PROYECTO_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    PROYECTO_KEY = V_PROYECTO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_USUARIOS (P_USUARIOS_KEY INTEGER)
RETURNS (
	USUARIOS_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_USUARIOS_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_USUARIOS_KEY = 0;

    IF (NOT EXISTS(SELECT USUARIOS_KEY
            FROM CAT_USUARIOS
            WHERE (USUARIOS_KEY = :P_USUARIOS_KEY))) THEN
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CAT_USUARIOS
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE USUARIOS_KEY = :P_USUARIOS_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    USUARIOS_KEY = V_USUARIOS_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CUADRILLA_PROYECTO (P_CUADRILLA_PROYECTO_KEY INTEGER)
RETURNS (
	CUADRILLA_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_CUADRILLA_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_CUADRILLA_PROYECTO_KEY = 0;

    IF (NOT EXISTS(SELECT CUADRILLA_PROYECTO_KEY
            FROM CUADRILLA_PROYECTO
            WHERE (CUADRILLA_PROYECTO_KEY = :P_CUADRILLA_PROYECTO_KEY))) THEN    
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE CUADRILLA_PROYECTO
    SET ESTATUS_LINK = 2
    WHERE CUADRILLA_PROYECTO_KEY = :P_CUADRILLA_PROYECTO_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    CUADRILLA_PROYECTO_KEY = V_CUADRILLA_PROYECTO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_PERFIL_PERMISO (P_PERFIL_PERMISO_KEY INTEGER)
RETURNS (
	PERFIL_PERMISO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERFIL_PERMISO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERFIL_PERMISO_KEY = 0;

    IF (NOT EXISTS(SELECT PERFIL_PERMISO_KEY
            FROM PERFIL_PERMISO
            WHERE (PERFIL_PERMISO_KEY = :P_PERFIL_PERMISO_KEY))) THEN    
    BEGIN
        V_MSG = 'No existe un registro con este key';
    END

    UPDATE PERFIL_PERMISO
    SET ESTATUS_LINK = 2
    WHERE PERFIL_PERMISO_KEY = :P_PERFIL_PERMISO_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    PERFIL_PERMISO_KEY = V_PERFIL_PERMISO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_DEL_USUARIO_PROYECTO (P_USUARIO_PROYECTO_KEY INTEGER, P_USUARIO_KEY INTEGER = NULL, P_PROYECTO_KEY INTEGER = NULL)
RETURNS (
	USUARIO_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
DECLARE VARIABLE V_COUNT INTEGER;
BEGIN
    V_CODE = 0;
    V_MSG = '';
    USUARIO_PROYECTO_KEY = 0;

    IF (:P_USUARIO_KEY IS NOT NULL AND :P_PROYECTO_KEY IS NOT NULL) THEN
    BEGIN
        SELECT COUNT(*)
        FROM USUARIO_PROYECTO
        WHERE USUARIO_LINK = :P_USUARIO_KEY AND PROYECTO_LINK = :P_PROYECTO_KEY
        INTO :V_COUNT;

        IF (V_COUNT = 0) THEN
        BEGIN
            V_MSG = 'No existen registros con esta combinación de usuario y proyecto';
        END
        ELSE
        BEGIN
            UPDATE USUARIO_PROYECTO
            SET ESTATUS_LINK = 2
            WHERE USUARIO_LINK = :P_USUARIO_KEY AND PROYECTO_LINK = :P_PROYECTO_KEY;

            IF (ROW_COUNT > 0) THEN
            BEGIN
                V_CODE = 1;
                V_MSG = 'Registros eliminados correctamente';
            END
            ELSE
            BEGIN
                V_CODE = 0;
                V_MSG = 'No se pudo eliminar los registros';
            END
        END
    END
    ELSE
    BEGIN
        IF (NOT EXISTS(SELECT USUARIO_PROYECTO_KEY
                FROM USUARIO_PROYECTO
                WHERE (USUARIO_PROYECTO_KEY = :P_USUARIO_PROYECTO_KEY))) THEN    
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        ELSE
        BEGIN
            UPDATE USUARIO_PROYECTO
            SET ESTATUS_LINK = 2
            WHERE USUARIO_PROYECTO_KEY = :P_USUARIO_PROYECTO_KEY;
            IF (ROW_COUNT > 0) THEN
            BEGIN
                V_CODE = 1;
                V_MSG = 'Registro eliminado correctamente';
            END
            ELSE
            BEGIN
                V_CODE = 0;
                V_MSG = 'No se pudo eliminar el registro';
            END
        END
    END

    RESULTADO = V_CODE;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_ALMACEN_PROYECTO (P_ALMACEN_PROYECTO_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	ALMACEN_PROYECTO_KEY INTEGER,
	ALMACEN_LINK INTEGER,
	PROYECTO_LINK INTEGER,
	FECHA_CREACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_ALMACEN_PROYECTO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT ALMACEN_PROYECTO_KEY, ALMACEN_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM ALMACEN_PROYECTO
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :ALMACEN_PROYECTO_KEY, :ALMACEN_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_ALMACEN_PROYECTO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT ALMACEN_PROYECTO_KEY, ALMACEN_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM ALMACEN_PROYECTO
            WHERE ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY
            INTO :ALMACEN_PROYECTO_KEY, :ALMACEN_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_ALMACENES (P_ALMACEN_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	ALMACEN_KEY INTEGER,
	CLAVE_ALMACEN VARCHAR(20),
	NOMBRE VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_ALMACEN_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT ALMACEN_KEY, CLAVE_ALMACEN, NOMBRE, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_ALMACENES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :ALMACEN_KEY, :CLAVE_ALMACEN, :NOMBRE, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_ALMACEN_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT ALMACEN_KEY, CLAVE_ALMACEN, NOMBRE, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_ALMACENES
            WHERE ALMACEN_KEY = :P_ALMACEN_KEY
            INTO :ALMACEN_KEY, :CLAVE_ALMACEN, :NOMBRE, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_BASES (P_BASE_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	BASE_KEY INTEGER,
	CODIGO_BASE VARCHAR(50),
	DESCRIPCION_BASE VARCHAR(100),
	MATERIAL VARCHAR(50),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_BASE_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT BASE_KEY, CODIGO_BASE, DESCRIPCION_BASE, MATERIAL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_BASES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :BASE_KEY, :CODIGO_BASE, :DESCRIPCION_BASE, :MATERIAL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_BASE_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT BASE_KEY, CODIGO_BASE, DESCRIPCION_BASE, MATERIAL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_BASES
            WHERE BASE_KEY = :P_BASE_KEY
            INTO :BASE_KEY, :CODIGO_BASE, :DESCRIPCION_BASE, :MATERIAL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_BRAZOS (P_BRAZO_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	BRAZO_KEY INTEGER,
	CODIGO_BRAZO VARCHAR(50),
	DESCRIPCION_BRAZO VARCHAR(100),
	MATERIAL VARCHAR(50),
	LONGITUD DECIMAL(5,2),
	ANGULO DECIMAL(5,2),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_BRAZO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT BRAZO_KEY, CODIGO_BRAZO, DESCRIPCION_BRAZO, MATERIAL, LONGITUD, ANGULO, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_BRAZOS
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :BRAZO_KEY, :CODIGO_BRAZO, :DESCRIPCION_BRAZO, :MATERIAL, :LONGITUD, :ANGULO, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_BRAZO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT BRAZO_KEY, CODIGO_BRAZO, DESCRIPCION_BRAZO, MATERIAL, LONGITUD, ANGULO, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_BRAZOS
            WHERE BRAZO_KEY = :P_BRAZO_KEY
            INTO :BRAZO_KEY, :CODIGO_BRAZO, :DESCRIPCION_BRAZO, :MATERIAL, :LONGITUD, :ANGULO, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_CUADRILLAS (P_CUADRILLA_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	CUADRILLA_KEY INTEGER,
	CLAVE_CUADRILLA VARCHAR(20),
	NOMBRE VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_CUADRILLA_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT CUADRILLA_KEY, CLAVE_CUADRILLA, NOMBRE, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_CUADRILLAS
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :CUADRILLA_KEY, :CLAVE_CUADRILLA, :NOMBRE, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_CUADRILLA_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT CUADRILLA_KEY, CLAVE_CUADRILLA, NOMBRE, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_CUADRILLAS
            WHERE CUADRILLA_KEY = :P_CUADRILLA_KEY
            INTO :CUADRILLA_KEY, :CLAVE_CUADRILLA, :NOMBRE, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_ESTADOS (P_ESTADO_KEY INTEGER = 0)
RETURNS (
	ESTADO_KEY INTEGER,
	CLAVE_ESTADO VARCHAR(20),
	NOMBRE VARCHAR(100),
	NOMBRE_ABREVIADO VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP
)
AS
BEGIN
    IF (:P_ESTADO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT ESTADO_KEY, CLAVE_ESTADO, NOMBRE, NOMBRE_ABREVIADO, FECHA_CREACION, FECHA_MODIFICACION
            FROM CAT_ESTADOS
            INTO :ESTADO_KEY, :CLAVE_ESTADO, :NOMBRE, :NOMBRE_ABREVIADO, :FECHA_CREACION, :FECHA_MODIFICACION
        DO
            SUSPEND;
    END
    ELSE IF (:P_ESTADO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT ESTADO_KEY, CLAVE_ESTADO, NOMBRE, NOMBRE_ABREVIADO, FECHA_CREACION, FECHA_MODIFICACION
            FROM CAT_ESTADOS
            WHERE ESTADO_KEY = :P_ESTADO_KEY
            INTO :ESTADO_KEY, :CLAVE_ESTADO, :NOMBRE, :NOMBRE_ABREVIADO, :FECHA_CREACION, :FECHA_MODIFICACION
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_ESTATUS (P_ESTATUS_KEY INTEGER = 0)
RETURNS (
	ESTATUS_KEY INTEGER,
	DESCRIPCION VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP
)
AS
BEGIN
    IF (:P_ESTATUS_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT ESTATUS_KEY, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION
            FROM CAT_ESTATUS
            INTO :ESTATUS_KEY, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION
        DO
            SUSPEND;
    END
    ELSE IF (:P_ESTATUS_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT ESTATUS_KEY, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION
            FROM CAT_ESTATUS
            WHERE ESTATUS_KEY = :P_ESTATUS_KEY
            INTO :ESTATUS_KEY, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_LAMPARAS (P_LAMPARA_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	LAMPARA_KEY INTEGER,
	CODIGO_LAMPARA VARCHAR(50),
	DESCRIPCION_LAMPARA VARCHAR(100),
	POTENCIA DECIMAL(6,2),
	VIDA_UTIL_HORAS INTEGER,
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_LAMPARA_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT LAMPARA_KEY, CODIGO_LAMPARA, DESCRIPCION_LAMPARA, POTENCIA, VIDA_UTIL_HORAS, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_LAMPARAS
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :LAMPARA_KEY, :CODIGO_LAMPARA, :DESCRIPCION_LAMPARA, :POTENCIA, :VIDA_UTIL_HORAS, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_LAMPARA_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT LAMPARA_KEY, CODIGO_LAMPARA, DESCRIPCION_LAMPARA, POTENCIA, VIDA_UTIL_HORAS, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_LAMPARAS
            WHERE LAMPARA_KEY = :P_LAMPARA_KEY
            INTO :LAMPARA_KEY, :CODIGO_LAMPARA, :DESCRIPCION_LAMPARA, :POTENCIA, :VIDA_UTIL_HORAS, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_MUNICIPIOS (P_MUNICIPIO_KEY INTEGER = 0)
RETURNS (
	MUNICIPIO_KEY INTEGER,
	ESTADO_LINK INTEGER,
	NOMBRE VARCHAR(100),
	CLAVE_MUNICIPIO VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP
)
AS
BEGIN
    IF (:P_MUNICIPIO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT MUNICIPIO_KEY, ESTADO_LINK, NOMBRE, CLAVE_MUNICIPIO, FECHA_CREACION, FECHA_MODIFICACION
            FROM CAT_MUNICIPIOS
            INTO :MUNICIPIO_KEY, :ESTADO_LINK, :NOMBRE, :CLAVE_MUNICIPIO, :FECHA_CREACION, :FECHA_MODIFICACION
        DO
            SUSPEND;
    END
    ELSE IF (:P_MUNICIPIO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT MUNICIPIO_KEY, ESTADO_LINK, NOMBRE, CLAVE_MUNICIPIO, FECHA_CREACION, FECHA_MODIFICACION
            FROM CAT_MUNICIPIOS
            WHERE MUNICIPIO_KEY = :P_MUNICIPIO_KEY
            INTO :MUNICIPIO_KEY, :ESTADO_LINK, :NOMBRE, :CLAVE_MUNICIPIO, :FECHA_CREACION, :FECHA_MODIFICACION
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_PERFILES (P_PERFIL_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	PERFIL_KEY INTEGER,
	NOMBRE VARCHAR(100),
	CLAVE_PERFIL VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_PERFIL_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT PERFIL_KEY, NOMBRE, CLAVE_PERFIL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERFILES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :PERFIL_KEY, :NOMBRE, :CLAVE_PERFIL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_PERFIL_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT PERFIL_KEY, NOMBRE, CLAVE_PERFIL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERFILES
            WHERE PERFIL_KEY = :P_PERFIL_KEY
            INTO :PERFIL_KEY, :NOMBRE, :CLAVE_PERFIL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_PERMISOS (P_PERMISO_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	PERMISO_KEY INTEGER,
	NOMBRE VARCHAR(100),
	DESCRIPCION VARCHAR(100),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_PERMISO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT PERMISO_KEY, NOMBRE, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERMISOS
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :PERMISO_KEY, :NOMBRE, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_PERMISO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT PERMISO_KEY, NOMBRE, DESCRIPCION, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERMISOS
            WHERE PERMISO_KEY = :P_PERMISO_KEY
            INTO :PERMISO_KEY, :NOMBRE, :DESCRIPCION, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_POSTES (P_POSTE_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	POSTE_KEY INTEGER,
	DESCRIPCION_POSTE VARCHAR(100),
	CODIGO_POSTE VARCHAR(50),
	MATERIAL VARCHAR(50),
	ALTURA DECIMAL(5,2),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_POSTE_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT POSTE_KEY, DESCRIPCION_POSTE, CODIGO_POSTE, MATERIAL, ALTURA, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_POSTES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :POSTE_KEY, :DESCRIPCION_POSTE, :CODIGO_POSTE, :MATERIAL, :ALTURA, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_POSTE_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT POSTE_KEY, DESCRIPCION_POSTE, CODIGO_POSTE, MATERIAL, ALTURA, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_POSTES
            WHERE POSTE_KEY = :P_POSTE_KEY
            INTO :POSTE_KEY, :DESCRIPCION_POSTE, :CODIGO_POSTE, :MATERIAL, :ALTURA, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_PROYECTOS (P_PROYECTO_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	PROYECTO_KEY INTEGER,
	CLAVE_PROYECTO VARCHAR(20),
	NOMBRE VARCHAR(200),
	DESCRIPCION BLOB,
	FECHA_INICIO DATE,
	FECHA_FIN DATE,
	LATITUD DOUBLE PRECISION,
	LONGITUD DOUBLE PRECISION,
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_PROYECTO_KEY = 0) THEN
    BEGIN
        FOR
            SELECT PROYECTO_KEY, CLAVE_PROYECTO, NOMBRE, DESCRIPCION, FECHA_INICIO, FECHA_FIN,
                   LATITUD, LONGITUD, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PROYECTOS
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :PROYECTO_KEY, :CLAVE_PROYECTO, :NOMBRE, :DESCRIPCION, :FECHA_INICIO, :FECHA_FIN,
                 :LATITUD, :LONGITUD, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_PROYECTO_KEY > 0) THEN
    BEGIN
        FOR
            SELECT PROYECTO_KEY, CLAVE_PROYECTO, NOMBRE, DESCRIPCION, FECHA_INICIO, FECHA_FIN,
                   LATITUD, LONGITUD, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PROYECTOS
            WHERE PROYECTO_KEY = :P_PROYECTO_KEY
            INTO :PROYECTO_KEY, :CLAVE_PROYECTO, :NOMBRE, :DESCRIPCION, :FECHA_INICIO, :FECHA_FIN,
                 :LATITUD, :LONGITUD, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_USUARIOS (P_USUARIOS_KEY INTEGER, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	USUARIOS_KEY INTEGER,
	NOMBRE VARCHAR(100),
	APELLIDO_PATERNO VARCHAR(100),
	APELLIDO_MATERNO VARCHAR(100),
	NOMBRE_COMPLETO VARCHAR(300),
	LOGIN VARCHAR(150),
	EMAIL VARCHAR(150),
	PASSWORD VARCHAR(255),
	TOKEN_PASSWORD VARCHAR(500),
	CLAVE_USUARIO VARCHAR(20),
	FECHA_CREACION TIMESTAMP,
	FECHA_MODIFICACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_USUARIOS_KEY = 0) THEN
    BEGIN
        FOR
            SELECT USUARIOS_KEY, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO,
                   NOMBRE || ' ' || APELLIDO_PATERNO || ' ' || COALESCE(APELLIDO_MATERNO, '') AS NOMBRE_COMPLETO,
                   LOGIN, EMAIL, PWD, TOKEN_PASSWORD, CLAVE_USUARIO,
                   FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_USUARIOS
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :USUARIOS_KEY, :NOMBRE, :APELLIDO_PATERNO, :APELLIDO_MATERNO,
                 :NOMBRE_COMPLETO, :LOGIN, :EMAIL, :PASSWORD, :TOKEN_PASSWORD,
                 :CLAVE_USUARIO, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_USUARIOS_KEY > 0) THEN
    BEGIN
        FOR
            SELECT USUARIOS_KEY, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO,
                   LOGIN, EMAIL, PWD, TOKEN_PASSWORD, CLAVE_USUARIO,
                   FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_USUARIOS
            WHERE USUARIOS_KEY = :P_USUARIOS_KEY
            INTO :USUARIOS_KEY, :NOMBRE, :APELLIDO_PATERNO, :APELLIDO_MATERNO,
                 :LOGIN, :EMAIL, :PASSWORD, :TOKEN_PASSWORD, :CLAVE_USUARIO,
                 :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CUADRILLA_PROYECTO (P_CUADRILLA_PROYECTO_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	CUADRILLA_PROYECTO_KEY INTEGER,
	CUADRILLA_LINK INTEGER,
	PROYECTO_LINK INTEGER,
	FECHA_CREACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_CUADRILLA_PROYECTO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT CUADRILLA_PROYECTO_KEY, CUADRILLA_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM CUADRILLA_PROYECTO
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :CUADRILLA_PROYECTO_KEY, :CUADRILLA_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_CUADRILLA_PROYECTO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT CUADRILLA_PROYECTO_KEY, CUADRILLA_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM CUADRILLA_PROYECTO
            WHERE CUADRILLA_PROYECTO_KEY = :P_CUADRILLA_PROYECTO_KEY
            INTO :CUADRILLA_PROYECTO_KEY, :CUADRILLA_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_PERFIL_PERMISO (P_PERFIL_PERMISO_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0)
RETURNS (
	PERFIL_PERMISO_KEY INTEGER,
	PERMISO_LINK INTEGER,
	PERFIL_LINK INTEGER,
	FECHA_CREACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_PERFIL_PERMISO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT PERFIL_PERMISO_KEY, PERMISO_LINK, PERFIL_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM PERFIL_PERMISO
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :PERFIL_PERMISO_KEY, :PERMISO_LINK, :PERFIL_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_PERFIL_PERMISO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT PERFIL_PERMISO_KEY, PERMISO_LINK, PERFIL_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM PERFIL_PERMISO
            WHERE PERFIL_PERMISO_KEY = :P_PERFIL_PERMISO_KEY
            INTO :PERFIL_PERMISO_KEY, :PERMISO_LINK, :PERFIL_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_SESSION_USUARIO (P_LOGIN VARCHAR(50), P_PASSWORD VARCHAR(500))
RETURNS (
	ID INTEGER,
	FULLNAME VARCHAR(200),
	LOGIN VARCHAR(50),
	EMAIL VARCHAR(100),
	STATUS VARCHAR(20),
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
/*
 * Usuario: Asanchezm
 * Fecha: 26/08/2025
 * Descripción: Obtiene la sesión del usuario

 * Modificaciones:
 * 26/08/2025, Asanchezm, Validación de usuario y contraseña
 */
DECLARE VARIABLE V_PASSWORD VARCHAR(255);
DECLARE VARIABLE V_ESTATUS_LINK INTEGER;
BEGIN
    RESULTADO = 0;
    MSG = '';

    IF (NOT EXISTS(SELECT USUARIOS_KEY FROM CAT_USUARIOS WHERE LOGIN = :P_LOGIN)) THEN
    BEGIN
        MSG = 'El usuario no existe';
        SUSPEND;
        EXIT;
    END

    SELECT PWD, ESTATUS_LINK
    FROM CAT_USUARIOS
    WHERE LOGIN = :P_LOGIN
    INTO :V_PASSWORD, :V_ESTATUS_LINK;

    IF (:V_PASSWORD <> :P_PASSWORD) THEN
    BEGIN
        MSG = 'Contraseña incorrecta';
        SUSPEND;
        EXIT;
    END

    IF (:V_ESTATUS_LINK <> 1) THEN
    BEGIN
        MSG = 'Usuario inactivo';
        SUSPEND;
        EXIT;
    END

    FOR
        SELECT 
            USUARIOS_KEY, 
            NOMBRE || ' ' || APELLIDO_PATERNO || ' ' || COALESCE(APELLIDO_MATERNO, '') AS FULLNAME,
            LOGIN,
            EMAIL,
            ESTATUS_LINK,
            1 AS RESULTADO,
            'Sesión iniciada correctamente' AS MSG
        FROM CAT_USUARIOS
        WHERE LOGIN = :P_LOGIN
        INTO :ID, :FULLNAME, :LOGIN, :EMAIL, :STATUS, :RESULTADO, :MSG
    DO
        SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_SMTP_X_COD_PROYECTO (P_CODIGO_PROYECTO VARCHAR(30))
RETURNS (
	SMTP_HOST VARCHAR(30),
	PUERTO VARCHAR(30),
	PWD VARCHAR(30),
	CORREO_REMITENTE VARCHAR(30),
	PROYECTO_LINK INTEGER,
	ESTATUS_LINK INTEGER,
	CLAVE_PROYECTO_LINK VARCHAR(20)
)
AS
begin
  for select SMTP_HOST, CSS.PUERTO, CSS.PWD, CSS.CORREO_REMITENTE, CSS.PROYECTO_LINK, CSS.ESTATUS_LINK,
             CSS.CLAVE_PROYECTO_LINK
      from CAT_SERVICIOS_SMTP CSS
      join CAT_PROYECTOS CP on CP.CLAVE_PROYECTO = CSS.CLAVE_PROYECTO_LINK
      where CSS.CLAVE_PROYECTO_LINK = :P_CODIGO_PROYECTO
      into :SMTP_HOST, :PUERTO, :PWD, :CORREO_REMITENTE, :PROYECTO_LINK, :ESTATUS_LINK, :CLAVE_PROYECTO_LINK
  do
  begin
    suspend;
  end
end;

CREATE OR ALTER PROCEDURE CTLIGHT_GET_USUARIO_PROYECTO (P_USUARIO_PROYECTO_KEY INTEGER = 0, P_ONLY_ACTIVE SMALLINT = 0, P_USUARIO_KEY INTEGER = NULL)
RETURNS (
	USUARIO_PROYECTO_KEY INTEGER,
	USUARIO_LINK INTEGER,
	PROYECTO_LINK INTEGER,
	FECHA_CREACION TIMESTAMP,
	ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_USUARIO_PROYECTO_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo o filtrado por usuario
        FOR
            SELECT USUARIO_PROYECTO_KEY, USUARIO_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM USUARIO_PROYECTO
            WHERE 
                (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
                AND (:P_USUARIO_KEY IS NULL OR USUARIO_LINK = :P_USUARIO_KEY)
            INTO :USUARIO_PROYECTO_KEY, :USUARIO_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_USUARIO_PROYECTO_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT USUARIO_PROYECTO_KEY, USUARIO_LINK, PROYECTO_LINK, FECHA_CREACION, ESTATUS_LINK
            FROM USUARIO_PROYECTO
            WHERE USUARIO_PROYECTO_KEY = :P_USUARIO_PROYECTO_KEY
            INTO :USUARIO_PROYECTO_KEY, :USUARIO_LINK, :PROYECTO_LINK, :FECHA_CREACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_ALMACEN_PROYECTO (P_ALMACEN_PROYECTO_KEY INTEGER, P_PROYECTO_KEY INTEGER, P_ALMACEN_KEY INTEGER, P_ESTATUS_LINK INTEGER)
RETURNS (
	ALMACEN_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_ALMACEN_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_ALMACEN_PROYECTO_KEY = 0;

    IF (:P_ALMACEN_PROYECTO_KEY = 0) THEN
    BEGIN
        INSERT INTO ALMACEN_PROYECTO (ALMACEN_LINK, PROYECTO_LINK, ESTATUS_LINK)
        VALUES (:P_ALMACEN_KEY, :P_PROYECTO_KEY, :P_ESTATUS_LINK)
        RETURNING ALMACEN_PROYECTO_KEY INTO :V_ALMACEN_PROYECTO_KEY;
    END
    ELSE IF (:P_ALMACEN_PROYECTO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ALMACEN_PROYECTO_KEY
                FROM ALMACEN_PROYECTO
                WHERE (ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE ALMACEN_PROYECTO
        SET ALMACEN_LINK = :P_ALMACEN_KEY,
            PROYECTO_LINK = :P_PROYECTO_KEY,
            ESTATUS_LINK = :P_ESTATUS_LINK
        WHERE ALMACEN_PROYECTO_KEY = :P_ALMACEN_PROYECTO_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    ALMACEN_PROYECTO_KEY = V_ALMACEN_PROYECTO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_ALMACENES (P_ALMACEN_KEY INTEGER, P_NOMBRE VARCHAR(100), P_CLAVE_ALMACEN VARCHAR(20), P_ESTATUS_LINK INTEGER)
RETURNS (
	ALMACEN_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_ALMACEN_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_ALMACEN_KEY = 0;

    IF (:P_ALMACEN_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_ALMACENES (CLAVE_ALMACEN, NOMBRE, ESTATUS_LINK)
        VALUES (:P_CLAVE_ALMACEN, :P_NOMBRE, :P_ESTATUS_LINK)
        RETURNING ALMACEN_KEY INTO :V_ALMACEN_KEY;
    END
    ELSE IF (:P_ALMACEN_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ALMACEN_KEY
                FROM CAT_ALMACENES
                WHERE (ALMACEN_KEY = :P_ALMACEN_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_ALMACENES
        SET NOMBRE = :P_NOMBRE,
            CLAVE_ALMACEN = :P_CLAVE_ALMACEN,
            ESTATUS_LINK = :P_ESTATUS_LINK
            WHERE ALMACEN_KEY = :P_ALMACEN_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    ALMACEN_KEY = V_ALMACEN_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_BASES (P_BASE_KEY INTEGER, P_CODIGO_BASE VARCHAR(50), P_DESCRIPCION_BASE VARCHAR(100), P_MATERIAL VARCHAR(50), P_ESTATUS_LINK INTEGER)
RETURNS (
	BASE_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_BASE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_BASE_KEY = 0;

    IF (:P_BASE_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_BASES (CODIGO_BASE, DESCRIPCION_BASE, MATERIAL, ESTATUS_LINK)
        VALUES (:P_CODIGO_BASE, :P_DESCRIPCION_BASE, :P_MATERIAL, :P_ESTATUS_LINK)
        RETURNING BASE_KEY INTO :V_BASE_KEY;
    END
    ELSE IF (:P_BASE_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT BASE_KEY
                FROM CAT_BASES
                WHERE (BASE_KEY = :P_BASE_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_BASES
        SET DESCRIPCION_BASE = :P_DESCRIPCION_BASE,
            MATERIAL = :P_MATERIAL,
            CODIGO_BASE = :P_CODIGO_BASE,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE BASE_KEY = :P_BASE_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    BASE_KEY = V_BASE_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_BRAZOS (P_BRAZO_KEY INTEGER, P_CODIGO_BRAZO VARCHAR(50), P_DESCRIPCION_BRAZO VARCHAR(100), P_MATERIAL VARCHAR(50), P_LONGITUD DECIMAL(5,2), P_ANGULO DECIMAL(5,2), P_ESTATUS_LINK INTEGER)
RETURNS (
	BRAZO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_BRAZO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_BRAZO_KEY = 0;

    IF (:P_BRAZO_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_BRAZOS (CODIGO_BRAZO, DESCRIPCION_BRAZO, MATERIAL, LONGITUD, ANGULO, ESTATUS_LINK)
        VALUES (:P_CODIGO_BRAZO, :P_DESCRIPCION_BRAZO, :P_MATERIAL, :P_LONGITUD, :P_ANGULO, :P_ESTATUS_LINK)
        RETURNING BRAZO_KEY INTO :V_BRAZO_KEY;
    END
    ELSE IF (:P_BRAZO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT BRAZO_KEY
                FROM CAT_BRAZOS
                WHERE (BRAZO_KEY = :P_BRAZO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_BRAZOS
        SET DESCRIPCION_BRAZO = :P_DESCRIPCION_BRAZO,
            CODIGO_BRAZO = :P_CODIGO_BRAZO,
            MATERIAL = :P_MATERIAL,
            LONGITUD = :P_LONGITUD,
            ANGULO = :P_ANGULO,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE BRAZO_KEY = :P_BRAZO_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    BRAZO_KEY = V_BRAZO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_CUADRILLAS (P_CUADRILLA_KEY INTEGER, P_CLAVE_CUADRILLA VARCHAR(20), P_NOMBRE VARCHAR(100), P_ESTATUS_LINK INTEGER)
RETURNS (
	CUADRILLA_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_CUADRILLA_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_CUADRILLA_KEY = 0;

    IF (:P_CUADRILLA_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_CUADRILLAS (CLAVE_CUADRILLA, NOMBRE, ESTATUS_LINK)
        VALUES (:P_CLAVE_CUADRILLA, :P_NOMBRE, :P_ESTATUS_LINK)
        RETURNING CUADRILLA_KEY INTO :V_CUADRILLA_KEY;
    END
    ELSE IF (:P_CUADRILLA_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT CUADRILLA_KEY
                FROM CAT_CUADRILLAS
                WHERE (CUADRILLA_KEY = :P_CUADRILLA_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_CUADRILLAS
        SET NOMBRE = :P_NOMBRE,
            CLAVE_CUADRILLA = :P_CLAVE_CUADRILLA,
            ESTATUS_LINK = :P_ESTATUS_LINK
            WHERE CUADRILLA_KEY = :P_CUADRILLA_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    CUADRILLA_KEY = V_CUADRILLA_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_ESTADOS (P_ESTADO_KEY INTEGER, P_CLAVE_ESTADO VARCHAR(20), P_NOMBRE VARCHAR(100), P_NOMBRE_ABREVIADO VARCHAR(100))
RETURNS (
	ESTADO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_ESTADO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_ESTADO_KEY = 0;

    IF (:P_ESTADO_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_ESTADOS (CLAVE_ESTADO, NOMBRE, NOMBRE_ABREVIADO)
        VALUES (:P_CLAVE_ESTADO, :P_NOMBRE, :P_NOMBRE_ABREVIADO)
        RETURNING ESTADO_KEY INTO :V_ESTADO_KEY;
    END
    ELSE IF (:P_ESTADO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ESTADO_KEY
                FROM CAT_ESTADOS
                WHERE (ESTADO_KEY = :P_ESTADO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_ESTADOS
        SET NOMBRE = :P_NOMBRE,
            NOMBRE_ABREVIADO = :P_NOMBRE_ABREVIADO,
            CLAVE_ESTADO = :P_CLAVE_ESTADO
            WHERE ESTADO_KEY = :P_ESTADO_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    ESTADO_KEY = V_ESTADO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_ESTATUS (P_ESTATUS_KEY INTEGER, P_DESCRIPCION VARCHAR(100))
RETURNS (
	ESTATUS_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
/*
 * Usuario: Asanchezm
 * Fecha: 20/05/2017
 * Descripción: Inserta o actualiza un registro en la tabla CAT_ESTATUS

 * Modificaciones:
 * 2025/08/21, Asanchezm, 
 */
DECLARE VARIABLE V_ESTATUS_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_ESTATUS_KEY = 0;

    IF (:P_ESTATUS_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_ESTATUS (DESCRIPCION)
        VALUES (:P_DESCRIPCION)
        RETURNING ESTATUS_KEY INTO :V_ESTATUS_KEY;
    END
    ELSE IF (:P_ESTATUS_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT ESTATUS_KEY
                FROM CAT_ESTATUS
                WHERE (ESTATUS_KEY = :P_ESTATUS_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_ESTATUS
        SET DESCRIPCION = :P_DESCRIPCION,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE ESTATUS_KEY = :P_ESTATUS_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se afectó ningún registro';
    END

    ESTATUS_KEY = :V_ESTATUS_KEY;
    RESULTADO = :V_CODE;
    MSG = :V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_LAMPARAS (P_LAMPARA_KEY INTEGER, P_CODIGO_LAMPARA VARCHAR(50), P_DESCRIPCION_LAMPARA VARCHAR(100), P_POTENCIA DECIMAL(6,2), P_VIDA_UTIL_HORAS INTEGER, P_ESTATUS_LINK INTEGER)
RETURNS (
	LAMPARA_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_LAMPARA_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_LAMPARA_KEY = 0;

    IF (:P_LAMPARA_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_LAMPARAS (CODIGO_LAMPARA, DESCRIPCION_LAMPARA, POTENCIA, VIDA_UTIL_HORAS, ESTATUS_LINK)
        VALUES (:P_CODIGO_LAMPARA, :P_DESCRIPCION_LAMPARA, :P_POTENCIA, :P_VIDA_UTIL_HORAS, :P_ESTATUS_LINK)
        RETURNING LAMPARA_KEY INTO :V_LAMPARA_KEY;
    END
    ELSE IF (:P_LAMPARA_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT LAMPARA_KEY
                FROM CAT_LAMPARAS
                WHERE (LAMPARA_KEY = :P_LAMPARA_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_LAMPARAS
        SET DESCRIPCION_LAMPARA = :P_DESCRIPCION_LAMPARA,
            CODIGO_LAMPARA = :P_CODIGO_LAMPARA,
            POTENCIA = :P_POTENCIA,
            VIDA_UTIL_HORAS = :P_VIDA_UTIL_HORAS,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE LAMPARA_KEY = :P_LAMPARA_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    LAMPARA_KEY = V_LAMPARA_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_MUNICIPIOS (P_MUNICIPIO_KEY INTEGER, P_NOMBRE VARCHAR(100), P_CLAVE_MUNICIPIO VARCHAR(100), P_ESTADO_LINK INTEGER)
RETURNS (
	MUNICIPIO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_MUNICIPIO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_MUNICIPIO_KEY = 0;

    IF (:P_MUNICIPIO_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_MUNICIPIOS (NOMBRE, CLAVE_MUNICIPIO, ESTADO_LINK)
        VALUES (:P_NOMBRE, :P_CLAVE_MUNICIPIO, :P_ESTADO_LINK)
        RETURNING MUNICIPIO_KEY INTO :V_MUNICIPIO_KEY;
    END
    ELSE IF (:P_MUNICIPIO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT MUNICIPIO_KEY
                FROM CAT_MUNICIPIOS
                WHERE (MUNICIPIO_KEY = :P_MUNICIPIO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_MUNICIPIOS SET NOMBRE = :P_NOMBRE,
            CLAVE_MUNICIPIO = :P_CLAVE_MUNICIPIO
            WHERE MUNICIPIO_KEY = :P_MUNICIPIO_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    MUNICIPIO_KEY = V_MUNICIPIO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_PERFILES (P_PERFIL_KEY INTEGER, P_NOMBRE VARCHAR(100), P_CLAVE_PERFIL VARCHAR(100), P_ESTATUS_LINK INTEGER)
RETURNS (
	PERFIL_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERFIL_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERFIL_KEY = 0;

    IF (:P_PERFIL_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_PERFILES (NOMBRE, CLAVE_PERFIL, ESTATUS_LINK)
        VALUES (:P_NOMBRE, :P_CLAVE_PERFIL, :P_ESTATUS_LINK)
        RETURNING PERFIL_KEY INTO :V_PERFIL_KEY;
    END
    ELSE IF (:P_PERFIL_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT PERFIL_KEY
                FROM CAT_PERFILES
                WHERE (PERFIL_KEY = :P_PERFIL_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_PERFILES
        SET NOMBRE = :P_NOMBRE,
            CLAVE_PERFIL = :P_CLAVE_PERFIL,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE PERFIL_KEY = :P_PERFIL_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    PERFIL_KEY = V_PERFIL_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_PERMISOS (P_PERMISO_KEY INTEGER, P_NOMBRE VARCHAR(100), P_DESCRIPCION VARCHAR(100), P_ESTATUS_LINK INTEGER)
RETURNS (
	PERMISO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERMISO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERMISO_KEY = 0;

    IF (:P_PERMISO_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_PERMISOS (NOMBRE, DESCRIPCION, ESTATUS_LINK)
        VALUES (:P_NOMBRE, :P_DESCRIPCION, :P_ESTATUS_LINK)
        RETURNING PERMISO_KEY INTO :V_PERMISO_KEY;
    END
    ELSE IF (:P_PERMISO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT PERMISO_KEY
                FROM CAT_PERMISOS
                WHERE (PERMISO_KEY = :P_PERMISO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_PERMISOS
        SET NOMBRE = :P_NOMBRE,
            DESCRIPCION = :P_DESCRIPCION,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE PERMISO_KEY = :P_PERMISO_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    PERMISO_KEY = V_PERMISO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_POSTES (P_POSTE_KEY INTEGER, P_DESCRIPCION_POSTE VARCHAR(100), P_CODIGO_POSTE VARCHAR(50), P_MATERIAL VARCHAR(50), P_ALTURA DECIMAL(5,2), P_ESTATUS_LINK INTEGER)
RETURNS (
	POSTE_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_POSTE_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_POSTE_KEY = 0;

    IF (:P_POSTE_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_POSTES (DESCRIPCION_POSTE, CODIGO_POSTE, MATERIAL, ALTURA, ESTATUS_LINK)
        VALUES (:P_DESCRIPCION_POSTE, :P_CODIGO_POSTE, :P_MATERIAL, :P_ALTURA, :P_ESTATUS_LINK)
        RETURNING POSTE_KEY INTO :V_POSTE_KEY;
    END
    ELSE IF (:P_POSTE_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT POSTE_KEY
                FROM CAT_POSTES
                WHERE (POSTE_KEY = :P_POSTE_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_POSTES
        SET DESCRIPCION_POSTE = :P_DESCRIPCION_POSTE,
            CODIGO_POSTE = :P_CODIGO_POSTE,
            MATERIAL = :P_MATERIAL,
            ALTURA = :P_ALTURA,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE POSTE_KEY = :P_POSTE_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    POSTE_KEY = V_POSTE_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_PROYECTOS (P_PROYECTO_KEY INTEGER, P_CLAVE_PROYECTO VARCHAR(20), P_NOMBRE VARCHAR(200), P_DESCRIPCION BLOB, P_FECHA_INICIO DATE, P_FECHA_FIN DATE, P_LATITUD DOUBLE PRECISION, P_LONGITUD DOUBLE PRECISION, P_ESTATUS_LINK INTEGER)
RETURNS (
	PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PROYECTO_KEY = 0;

    IF (:P_PROYECTO_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_PROYECTOS (CLAVE_PROYECTO, NOMBRE, DESCRIPCION, FECHA_INICIO, FECHA_FIN,
                                   LATITUD, LONGITUD, ESTATUS_LINK)
        VALUES (:P_CLAVE_PROYECTO, :P_NOMBRE, :P_DESCRIPCION, :P_FECHA_INICIO, :P_FECHA_FIN,
                :P_LATITUD, :P_LONGITUD, :P_ESTATUS_LINK)
        RETURNING PROYECTO_KEY INTO :V_PROYECTO_KEY;
    END
    ELSE IF (:P_PROYECTO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT PROYECTO_KEY
                FROM CAT_PROYECTOS
                WHERE (PROYECTO_KEY = :P_PROYECTO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_PROYECTOS
        SET CLAVE_PROYECTO = :P_CLAVE_PROYECTO,
            NOMBRE = :P_NOMBRE,
            DESCRIPCION = :P_DESCRIPCION,
            FECHA_INICIO = :P_FECHA_INICIO,
            FECHA_FIN = :P_FECHA_FIN,
            LATITUD = :P_LATITUD,
            LONGITUD = :P_LONGITUD,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE PROYECTO_KEY = :P_PROYECTO_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    PROYECTO_KEY = V_PROYECTO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_USUARIOS (P_USUARIOS_KEY INTEGER, P_NOMBRE VARCHAR(100), P_APELLIDO_PATERNO VARCHAR(100), P_APELLIDO_MATERNO VARCHAR(100), P_LOGIN VARCHAR(150), P_EMAIL VARCHAR(150), P_PASSWORD VARCHAR(255), P_TOKEN_PASSWORD VARCHAR(500), P_CLAVE_USUARIO VARCHAR(20), P_ESTATUS_LINK INTEGER)
RETURNS (
	USUARIOS_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
declare variable V_USUARIOS_KEY integer;
declare variable V_CODE integer;
declare variable V_MSG varchar(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_USUARIOS_KEY = 0;

    IF (:P_USUARIOS_KEY = 0) THEN
    BEGIN
        INSERT INTO CAT_USUARIOS (NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, LOGIN, EMAIL, PWD,
                                  TOKEN_PASSWORD, CLAVE_USUARIO, ESTATUS_LINK)
        VALUES (:P_NOMBRE, :P_APELLIDO_PATERNO, :P_APELLIDO_MATERNO, :P_LOGIN, :P_EMAIL, :P_PASSWORD,
                :P_TOKEN_PASSWORD, :P_CLAVE_USUARIO, :P_ESTATUS_LINK)
        RETURNING USUARIOS_KEY INTO :V_USUARIOS_KEY;
    END
    ELSE IF (:P_USUARIOS_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT USUARIOS_KEY
                FROM CAT_USUARIOS
                WHERE (USUARIOS_KEY = :P_USUARIOS_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CAT_USUARIOS
        SET NOMBRE = :P_NOMBRE,
            APELLIDO_PATERNO = :P_APELLIDO_PATERNO,
            APELLIDO_MATERNO = :P_APELLIDO_MATERNO,
            LOGIN = :P_LOGIN,
            EMAIL = :P_EMAIL,
            PWD = :P_PASSWORD,
            TOKEN_PASSWORD = :P_TOKEN_PASSWORD,
            CLAVE_USUARIO = :P_CLAVE_USUARIO,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
            WHERE USUARIOS_KEY = :P_USUARIOS_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    USUARIOS_KEY = V_USUARIOS_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CUADRILLA_PROYECTO (P_CUADRILLA_PROYECTO_KEY INTEGER, P_PROYECTO_KEY INTEGER, P_CUADRILLA_KEY INTEGER, P_ESTATUS_LINK INTEGER)
RETURNS (
	CUADRILLA_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_CUADRILLA_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_CUADRILLA_PROYECTO_KEY = 0;

    IF (:P_CUADRILLA_PROYECTO_KEY = 0) THEN
    BEGIN
        INSERT INTO CUADRILLA_PROYECTO (CUADRILLA_LINK, PROYECTO_LINK, ESTATUS_LINK)
        VALUES (:P_CUADRILLA_KEY, :P_PROYECTO_KEY, :P_ESTATUS_LINK)
        RETURNING CUADRILLA_PROYECTO_KEY INTO :V_CUADRILLA_PROYECTO_KEY;
    END
    ELSE IF (:P_CUADRILLA_PROYECTO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT CUADRILLA_PROYECTO_KEY
                FROM CUADRILLA_PROYECTO
                WHERE (CUADRILLA_PROYECTO_KEY = :P_CUADRILLA_PROYECTO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE CUADRILLA_PROYECTO
        SET CUADRILLA_LINK = :P_CUADRILLA_KEY,
            PROYECTO_LINK = :P_PROYECTO_KEY,
            ESTATUS_LINK = :P_ESTATUS_LINK
        WHERE CUADRILLA_PROYECTO_KEY = :P_CUADRILLA_PROYECTO_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    CUADRILLA_PROYECTO_KEY = V_CUADRILLA_PROYECTO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_FORGOT_PASSWORD (P_EMAIL VARCHAR(150), P_TOKEN VARCHAR(500))
RETURNS (
	TOKEN VARCHAR(500),
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
/* 
 * Usuario: Asanchezm
 * Fecha: 27/08/2025
 * Descripción: Genera un token para iniciar el proceso de recuperación de contraseña

 * Modificaciones:
 * 27/08/2025, Asanchezm, Creación del procedimiento
 */
DECLARE VARIABLE V_USUARIOS_KEY INTEGER;
DECLARE VARIABLE V_TOKEN VARCHAR(500);
BEGIN
    RESULTADO = 0;
    MSG = 'No se pudo generar el token';
    TOKEN = NULL;

    SELECT USUARIOS_KEY FROM CAT_USUARIOS WHERE EMAIL = :P_EMAIL INTO :V_USUARIOS_KEY;

    IF (V_USUARIOS_KEY IS NULL) THEN
    BEGIN
        MSG = 'El correo no existe en la base de datos';
        SUSPEND;
        EXIT;
    END

    V_TOKEN = P_TOKEN;

    UPDATE CAT_USUARIOS
    SET TOKEN_PASSWORD = :V_TOKEN,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE USUARIOS_KEY = :V_USUARIOS_KEY;

    IF (ROW_COUNT > 0) THEN
    BEGIN
        RESULTADO = 1;
        MSG = 'Token generado correctamente';
        TOKEN = V_TOKEN;
    END

    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_PERFIL_PERMISO (P_PERFIL_PERMISO_KEY INTEGER, P_PERMISO_KEY INTEGER, P_PERFIL_KEY INTEGER, P_ESTATUS_LINK INTEGER)
RETURNS (
	PERFIL_PERMISO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERFIL_PERMISO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERFIL_PERMISO_KEY = 0;

    IF (:P_PERFIL_PERMISO_KEY = 0) THEN
    BEGIN
        INSERT INTO PERFIL_PERMISO (PERMISO_LINK, PERFIL_LINK, ESTATUS_LINK)
        VALUES (:P_PERMISO_KEY, :P_PERFIL_KEY, :P_ESTATUS_LINK)
        RETURNING PERFIL_PERMISO_KEY INTO :V_PERFIL_PERMISO_KEY;
    END
    ELSE IF (:P_PERFIL_PERMISO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT PERFIL_PERMISO_KEY
                FROM PERFIL_PERMISO
                WHERE (PERFIL_PERMISO_KEY = :P_PERFIL_PERMISO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        UPDATE PERFIL_PERMISO
        SET PERMISO_LINK = :P_PERMISO_KEY,
            PERFIL_LINK = :P_PERFIL_KEY,
            ESTATUS_LINK = :P_ESTATUS_LINK
        WHERE PERFIL_PERMISO_KEY = :P_PERFIL_PERMISO_KEY;
    END
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    PERFIL_PERMISO_KEY = V_PERFIL_PERMISO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_RESET_PASSWORD (P_TOKEN_PASSWORD VARCHAR(500), P_NEW_PASSWORD VARCHAR(255), P_CONFIRM_PASSWORD VARCHAR(255))
RETURNS (
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
/*
 * Usuario: Asanchezm
 * Fecha: 27/08/2025
 * Descripción: Restablece la contraseña de un usuario utilizando un token de recuperación.
 *
 * Modificaciones:
 * 27/08/2025, Asanchezm, Creación del procedimiento
 */
DECLARE VARIABLE V_USUARIOS_KEY INTEGER;
BEGIN
    RESULTADO = 0;
    MSG = 'No existe el token';

    SELECT USUARIOS_KEY FROM CAT_USUARIOS WHERE TOKEN_PASSWORD = :P_TOKEN_PASSWORD INTO :V_USUARIOS_KEY;

    IF (V_USUARIOS_KEY IS NULL) THEN
    BEGIN
        SUSPEND;
        EXIT;
    END

    IF (:P_NEW_PASSWORD <> :P_CONFIRM_PASSWORD) THEN
    BEGIN
        MSG = 'Las contraseñas no coinciden';
        SUSPEND;
        EXIT;
    END

    UPDATE CAT_USUARIOS
    SET PWD = :P_NEW_PASSWORD,
        TOKEN_PASSWORD = NULL,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE USUARIOS_KEY = :V_USUARIOS_KEY;

    IF (ROW_COUNT > 0) THEN
    BEGIN
        RESULTADO = 1;
        MSG = 'Contraseña actualizada';
    END

    SUSPEND;
END;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_USUARIO_PROYECTO (P_USUARIO_PROYECTO_KEY INTEGER, P_PROYECTO_KEY INTEGER, P_USUARIO_KEY INTEGER, P_ESTATUS_LINK INTEGER)
RETURNS (
	USUARIO_PROYECTO_KEY INTEGER,
	RESULTADO INTEGER,
	MSG VARCHAR(100)
)
AS
/*
 * Usuario: Asanchezm
 * Fecha: 20/05/2017
 * Descripción: Inserta o actualiza un registro en la tabla USUARIO_PROYECTO

 * Modificaciones:
 * 2025/08/21, Asanchezm, 
 * Descripción: Se agrega validación para evitar duplicados en la combinación de usuario y proyecto.
 */
DECLARE VARIABLE V_USUARIO_PROYECTO_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
DECLARE VARIABLE V_EXISTE INTEGER;
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_USUARIO_PROYECTO_KEY = 0;
    V_EXISTE = 0;

    IF (:P_USUARIO_PROYECTO_KEY = 0) THEN
    BEGIN
        SELECT COUNT(*)
        FROM USUARIO_PROYECTO
        WHERE PROYECTO_LINK = :P_PROYECTO_KEY AND USUARIO_LINK = :P_USUARIO_KEY
        INTO :V_EXISTE;

        IF (V_EXISTE > 0) THEN
        BEGIN
            UPDATE USUARIO_PROYECTO
            SET ESTATUS_LINK = :P_ESTATUS_LINK
            WHERE PROYECTO_LINK = :P_PROYECTO_KEY AND USUARIO_LINK = :P_USUARIO_KEY;
            V_CODE = 1;
            V_MSG = 'Información guardada correctamente';
        END
        ELSE
        BEGIN
            INSERT INTO USUARIO_PROYECTO (USUARIO_LINK, PROYECTO_LINK, ESTATUS_LINK)
            VALUES (:P_USUARIO_KEY, :P_PROYECTO_KEY, :P_ESTATUS_LINK)
            RETURNING USUARIO_PROYECTO_KEY INTO :V_USUARIO_PROYECTO_KEY;

            IF (ROW_COUNT > 0) THEN
            BEGIN
                V_CODE = 1;
                V_MSG = 'Información guardada correctamente';
            END
            ELSE
            BEGIN
                V_CODE = 0;
                V_MSG = 'No se pudo guardar la información';
            END
        END
    END
    ELSE IF (:P_USUARIO_PROYECTO_KEY > 0) THEN
    BEGIN
        IF (NOT EXISTS(SELECT USUARIO_PROYECTO_KEY
                FROM USUARIO_PROYECTO
                WHERE (USUARIO_PROYECTO_KEY = :P_USUARIO_PROYECTO_KEY))) THEN
        BEGIN
            V_MSG = 'No existe un registro con este key';
        END
        ELSE
        BEGIN
            -- Validar que no exista otro registro con la misma combinación
            SELECT COUNT(*)
            FROM USUARIO_PROYECTO
            WHERE PROYECTO_LINK = :P_PROYECTO_KEY
                AND USUARIO_LINK = :P_USUARIO_KEY
                AND USUARIO_PROYECTO_KEY <> :P_USUARIO_PROYECTO_KEY
            INTO :V_EXISTE;

            IF (V_EXISTE > 0) THEN
            BEGIN
                UPDATE USUARIO_PROYECTO
                SET ESTATUS_LINK = :P_ESTATUS_LINK
                WHERE PROYECTO_LINK = :P_PROYECTO_KEY AND USUARIO_LINK = :P_USUARIO_KEY;
                V_CODE = 1;
                V_MSG = 'Información guardada correctamente';
            END
            ELSE
            BEGIN
                UPDATE USUARIO_PROYECTO
                SET USUARIO_LINK = :P_USUARIO_KEY,
                    PROYECTO_LINK = :P_PROYECTO_KEY,
                    ESTATUS_LINK = :P_ESTATUS_LINK
                WHERE USUARIO_PROYECTO_KEY = :P_USUARIO_PROYECTO_KEY;

                IF (ROW_COUNT > 0) THEN
                BEGIN
                    V_CODE = 1;
                    V_MSG = 'Información guardada correctamente';
                    V_USUARIO_PROYECTO_KEY = :P_USUARIO_PROYECTO_KEY;
                END
                ELSE
                BEGIN
                    V_CODE = 0;
                    V_MSG = 'No se pudo guardar la información';
                END
            END
        END
    END

    RESULTADO = V_CODE;
    USUARIO_PROYECTO_KEY = V_USUARIO_PROYECTO_KEY;
    MSG = V_MSG;
    SUSPEND;
END;