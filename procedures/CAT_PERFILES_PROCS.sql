SET TERM ^ ;

CREATE OR ALTER PROCEDURE CTLIGHT_SET_CAT_PERFILES (
    P_PERFIL_KEY INTEGER,
    P_NOMBRE VARCHAR(100),
    P_CLAVE_PERFIL VARCHAR(100),
    P_ESTATUS_LINK INTEGER
)
RETURNS (
    PERFIL_KEY INTEGER,
    RESULTADO INTEGER,
    MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERFIL_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERFIL_KEY = 0;

    IF (:P_PERFIL_KEY = 0) THEN
    BEGIN
		INSERT INTO CAT_PERFILES (NOMBRE, CLAVE_PERFIL, ESTATUS_LINK)
		VALUES (:P_NOMBRE, :P_CLAVE_PERFIL, :P_ESTATUS_LINK)
		RETURNING PERFIL_KEY INTO :V_PERFIL_KEY;
    END
    ELSE IF (:P_PERFIL_KEY > 0) THEN
    BEGIN
		IF (NOT EXISTS(SELECT PERFIL_KEY
				FROM CAT_PERFILES
				WHERE (PERFIL_KEY = :P_PERFIL_KEY))) THEN
		BEGIN
			V_MSG = 'No existe un registro con este key';
		END
        UPDATE CAT_PERFILES
        SET NOMBRE = :P_NOMBRE,
            CLAVE_PERFIL = :P_CLAVE_PERFIL,
            ESTATUS_LINK = :P_ESTATUS_LINK,
            FECHA_MODIFICACION = CURRENT_TIMESTAMP
        WHERE PERFIL_KEY = :P_PERFIL_KEY;
    END

    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Información guardada correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo guardar la información';
    END

    RESULTADO = V_CODE;
    PERFIL_KEY = V_PERFIL_KEY;
    MSG = V_MSG;
    SUSPEND;
END^

/* Borrado lógico: estatus_link = 2 */
CREATE OR ALTER PROCEDURE CTLIGHT_DEL_CAT_PERFILES (
    P_PERFIL_KEY INTEGER
)
RETURNS (
    PERFIL_KEY INTEGER,
    RESULTADO INTEGER,
    MSG VARCHAR(100)
)
AS
DECLARE VARIABLE V_PERFIL_KEY INTEGER;
DECLARE VARIABLE V_CODE INTEGER;
DECLARE VARIABLE V_MSG VARCHAR(100);
BEGIN
    V_CODE = 0;
    V_MSG = '';
    V_PERFIL_KEY = 0;

    IF (NOT EXISTS(SELECT PERFIL_KEY
		FROM CAT_PERFILES
		WHERE (PERFIL_KEY = :P_PERFIL_KEY))) THEN
	BEGIN
		V_MSG = 'No existe un registro con este key';
	END

    UPDATE CAT_PERFILES
    SET ESTATUS_LINK = 2,
        FECHA_MODIFICACION = CURRENT_TIMESTAMP
    WHERE PERFIL_KEY = :P_PERFIL_KEY;
    IF (ROW_COUNT > 0) THEN
    BEGIN
        V_CODE = 1;
        V_MSG = 'Registro eliminado correctamente';
    END
    ELSE
    BEGIN
        V_CODE = 0;
        V_MSG = 'No se pudo eliminar el registro';
    END
    RESULTADO = V_CODE;
    PERFIL_KEY = V_PERFIL_KEY;
    MSG = V_MSG;
    SUSPEND;
END^

CREATE OR ALTER PROCEDURE CTLIGHT_GET_CAT_PERFILES (
    P_PERFIL_KEY INTEGER = 0,
    P_ONLY_ACTIVE SMALLINT = 0
)
RETURNS (
    PERFIL_KEY INTEGER,
    NOMBRE VARCHAR(100),
    CLAVE_PERFIL VARCHAR(100),
    FECHA_CREACION TIMESTAMP,
    FECHA_MODIFICACION TIMESTAMP,
    ESTATUS_LINK INTEGER
)
AS
BEGIN
    IF (:P_PERFIL_KEY = 0) THEN
    BEGIN
        -- Retornar listado completo
        FOR
            SELECT PERFIL_KEY, NOMBRE, CLAVE_PERFIL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERFILES
            WHERE (:P_ONLY_ACTIVE = 0 OR ESTATUS_LINK = 1)
            INTO :PERFIL_KEY, :NOMBRE, :CLAVE_PERFIL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
    ELSE IF (:P_PERFIL_KEY > 0) THEN
    BEGIN
        -- Retornar solo un registro específico
        FOR
            SELECT PERFIL_KEY, NOMBRE, CLAVE_PERFIL, FECHA_CREACION, FECHA_MODIFICACION, ESTATUS_LINK
            FROM CAT_PERFILES
            WHERE PERFIL_KEY = :P_PERFIL_KEY
            INTO :PERFIL_KEY, :NOMBRE, :CLAVE_PERFIL, :FECHA_CREACION, :FECHA_MODIFICACION, :ESTATUS_LINK
        DO
            SUSPEND;
    END
END^

SET TERM ; ^